<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>解析PEB</title>
      <link href="/post/db27253d.html"/>
      <url>/post/db27253d.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>学习syscall和免杀绕不开PEB这个部分，我们要对相关结构熟悉，既要会手动解析，也能利用代码解析。</p><h3 id="PEB结构："><a href="#PEB结构：" class="headerlink" title="PEB结构："></a>PEB结构：</h3><p>经典大图，永不过时：</p><img src="/post/db27253d/1678437013915-a86d3186-b781-47d0-b4a0-8df5788b0485.png" class=""><p>注：PEB的结构微软并未完全公开，以上图片可以参考但不一定权威</p><p>如果你对偏移比较熟悉的话可以直接用指针+偏移找，不需要特地定义结构体，而且双向链表<code>_LIST_ENTRY</code>这个是公开的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> &#123;</span><br><span class="line">   <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> *Flink;</span><br><span class="line">   <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> *Blink;</span><br><span class="line">&#125; LIST_ENTRY, *PLIST_ENTRY, *RESTRICTED_POINTER PRLIST_ENTRY;</span><br></pre></td></tr></table></figure><p><strong>自定义PEB的结构</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_PEB</span> &#123;</span><br><span class="line">    BOOLEAN InheritedAddressSpace;</span><br><span class="line">    BOOLEAN ReadImageFileExecOptions;</span><br><span class="line">    BOOLEAN BeingDebugged;</span><br><span class="line">    BOOLEAN Spare;</span><br><span class="line">    HANDLE Mutant;</span><br><span class="line">    PVOID ImageBase;</span><br><span class="line">    PPEB_LDR_DATA LoaderData;<span class="comment">// 0x0c </span></span><br><span class="line">    PVOID ProcessParameters;</span><br><span class="line">    PVOID SubSystemData;</span><br><span class="line">    PVOID ProcessHeap;</span><br><span class="line">    PVOID FastPebLock;</span><br><span class="line">    PVOID FastPebLockRoutine;</span><br><span class="line">    PVOID FastPebUnlockRoutine;</span><br><span class="line">    ULONG EnvironmentUpdateCount;</span><br><span class="line">    PVOID* KernelCallbackTable;</span><br><span class="line">    PVOID EventLogSection;</span><br><span class="line">    PVOID EventLog;</span><br><span class="line">    PVOID FreeList;</span><br><span class="line">    ULONG TlsExpansionCounter;</span><br><span class="line">    PVOID TlsBitmap;</span><br><span class="line">    ULONG TlsBitmapBits[<span class="number">0x2</span>];</span><br><span class="line">    PVOID ReadOnlySharedMemoryBase;</span><br><span class="line">    PVOID ReadOnlySharedMemoryHeap;</span><br><span class="line">    PVOID* ReadOnlyStaticServerData;</span><br><span class="line">    PVOID AnsiCodePageData;</span><br><span class="line">    PVOID OemCodePageData;</span><br><span class="line">    PVOID UnicodeCaseTableData;</span><br><span class="line">    ULONG NumberOfProcessors;</span><br><span class="line">    ULONG NtGlobalFlag;</span><br><span class="line">    BYTE Spare2[<span class="number">0x4</span>];</span><br><span class="line">    LARGE_INTEGER CriticalSectionTimeout;</span><br><span class="line">    ULONG HeapSegmentReserve;</span><br><span class="line">    ULONG HeapSegmentCommit;</span><br><span class="line">    ULONG HeapDeCommitTotalFreeThreshold;</span><br><span class="line">    ULONG HeapDeCommitFreeBlockThreshold;</span><br><span class="line">    ULONG NumberOfHeaps;</span><br><span class="line">    ULONG MaximumNumberOfHeaps;</span><br><span class="line">    PVOID** ProcessHeaps;</span><br><span class="line">    PVOID GdiSharedHandleTable;</span><br><span class="line">    PVOID ProcessStarterHelper;</span><br><span class="line">    PVOID GdiDCAttributeList;</span><br><span class="line">    PVOID LoaderLock;</span><br><span class="line">    ULONG OSMajorVersion;</span><br><span class="line">    ULONG OSMinorVersion;</span><br><span class="line">    ULONG OSBuildNumber;</span><br><span class="line">    ULONG OSPlatformId;</span><br><span class="line">    ULONG ImageSubSystem;</span><br><span class="line">    ULONG ImageSubSystemMajorVersion;</span><br><span class="line">    ULONG ImageSubSystemMinorVersion;</span><br><span class="line">    ULONG GdiHandleBuffer[<span class="number">0x22</span>];</span><br><span class="line">    ULONG PostProcessInitRoutine;</span><br><span class="line">    ULONG TlsExpansionBitmap;</span><br><span class="line">    BYTE TlsExpansionBitmapBits[<span class="number">0x80</span>];</span><br><span class="line">    ULONG SessionId;</span><br><span class="line">&#125; PEB, * PPEB;</span><br></pre></td></tr></table></figure><p>我们主要是需要0x0c(64位为0x18)偏移处的<code>PPEB_LDR_DATA</code>结构</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_PEB_LDR_DATA</span> &#123;</span><br><span class="line">    ULONG Length;</span><br><span class="line">    ULONG Initialized;</span><br><span class="line">    PVOID SsHandle;</span><br><span class="line">    LIST_ENTRY InLoadOrderModuleList;</span><br><span class="line">    LIST_ENTRY InMemoryOrderModuleList;</span><br><span class="line">    LIST_ENTRY InInitializationOrderModuleList;</span><br><span class="line">&#125; PEB_LDR_DATA, * PPEB_LDR_DATA;</span><br></pre></td></tr></table></figure><p>在<code>PEB_LDR_DATA</code>的0x0c、0x14、0x1c中为三个双向链表<code>LIST_ENTRY</code><br>三个链表加载模块分别代表<strong>模块加载顺序，模块在内存中的加载顺序以及模块初始化装载的顺序</strong>，<code>PEB_LDR_DATA</code>结构类似于一个火车头，三个双向链表<code>LIST_ENTRY</code>意思相同，只是顺序不一样，都指向下一个_LDR_DATA_TABLE_ENTRY结构（也有的定义为<code>_LDR_MODULE</code> 结构）毕竟微软没有公开结构，只要我们所需的偏移一致就行。<br><strong>_LDR_DATA_TABLE_ENTRY 32位版本：</strong></p><img src="/post/db27253d/1678441105093-4fb57c3a-5abd-477d-b806-adb566de0139.png" class=""><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_LDR_DATA_TABLE_ENTRY</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> InLoadOrderLinks;                                    <span class="comment">//0x0</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> InMemoryOrderLinks;                                  <span class="comment">//0x8</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> InInitializationOrderLinks;                          <span class="comment">//0x10</span></span><br><span class="line">    VOID* DllBase;                                                          <span class="comment">//0x18</span></span><br><span class="line">    VOID* EntryPoint;                                                       <span class="comment">//0x1c</span></span><br><span class="line">    ULONG SizeOfImage;                                                      <span class="comment">//0x20</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_UNICODE_STRING</span> FullDllName;                                     <span class="comment">//0x24</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_UNICODE_STRING</span> BaseDllName;                                     <span class="comment">//0x2c</span></span><br><span class="line">    ULONG Flags;                                                            <span class="comment">//0x34</span></span><br><span class="line">    USHORT LoadCount;                                                       <span class="comment">//0x38</span></span><br><span class="line">    USHORT TlsIndex;                                                        <span class="comment">//0x3a</span></span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> HashLinks;                                       <span class="comment">//0x3c</span></span><br><span class="line">        <span class="keyword">struct</span></span><br><span class="line">        &#123;</span><br><span class="line">            VOID* SectionPointer;                                           <span class="comment">//0x3c</span></span><br><span class="line">            ULONG CheckSum;                                                 <span class="comment">//0x40</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">        ULONG TimeDateStamp;                                                <span class="comment">//0x44</span></span><br><span class="line">        VOID* LoadedImports;                                                <span class="comment">//0x44</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_ACTIVATION_CONTEXT</span>* EntryPointActivationContext;                <span class="comment">//0x48</span></span><br><span class="line">    VOID* PatchInformation;                                                 <span class="comment">//0x4c</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> ForwarderLinks;                                      <span class="comment">//0x50</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> ServiceTagLinks;                                     <span class="comment">//0x58</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> StaticLinks;                                         <span class="comment">//0x60</span></span><br><span class="line">    VOID* ContextInformation;                                               <span class="comment">//0x68</span></span><br><span class="line">    ULONG OriginalBase;                                                     <span class="comment">//0x6c</span></span><br><span class="line">    <span class="keyword">union</span> <span class="title class_">_LARGE_INTEGER</span> LoadTime;                                          <span class="comment">//0x70</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>_LDR_DATA_TABLE_ENTRY64 64位版本：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_LDR_DATA_TABLE_ENTRY64</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LIST_ENTRY64</span> InLoadOrderLinks;                                    <span class="comment">//0x0</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LIST_ENTRY64</span> InMemoryOrderLinks;                                  <span class="comment">//0x10</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LIST_ENTRY64</span> InInitializationOrderLinks;                          <span class="comment">//0x20</span></span><br><span class="line">    VOID* DllBase;                                                          <span class="comment">//0x30</span></span><br><span class="line">    VOID* EntryPoint;                                                       <span class="comment">//0x38</span></span><br><span class="line">    ULONG SizeOfImage;                                                      <span class="comment">//0x40</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_UNICODE_STRING</span> FullDllName;                                     <span class="comment">//0x48</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_UNICODE_STRING</span> BaseDllName;                                     <span class="comment">//0x58</span></span><br><span class="line">    ULONG Flags;                                                            <span class="comment">//0x68</span></span><br><span class="line">    USHORT LoadCount;                                                       <span class="comment">//0x6c</span></span><br><span class="line">    USHORT TlsIndex;                                                        <span class="comment">//0x6e</span></span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">LIST_ENTRY64</span> HashLinks;                                       <span class="comment">//0x70</span></span><br><span class="line">        <span class="keyword">struct</span></span><br><span class="line">        &#123;</span><br><span class="line">            VOID* SectionPointer;                                           <span class="comment">//0x70</span></span><br><span class="line">            ULONG CheckSum;                                                 <span class="comment">//0x78</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">        ULONG TimeDateStamp;                                                <span class="comment">//0x80</span></span><br><span class="line">        VOID* LoadedImports;                                                <span class="comment">//0x80</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_ACTIVATION_CONTEXT</span>* EntryPointActivationContext;                <span class="comment">//0x88</span></span><br><span class="line">    VOID* PatchInformation;                                                 <span class="comment">//0x90</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LIST_ENTRY64</span> ForwarderLinks;                                      <span class="comment">//0x98</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LIST_ENTRY64</span> ServiceTagLinks;                                     <span class="comment">//0xa8</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LIST_ENTRY64</span> StaticLinks;                                         <span class="comment">//0xb8</span></span><br><span class="line">    VOID* ContextInformation;                                               <span class="comment">//0xc8</span></span><br><span class="line">    ULONGLONG OriginalBase;                                                 <span class="comment">//0xd0</span></span><br><span class="line">    <span class="keyword">union</span> <span class="title class_">_LARGE_INTEGER</span> LoadTime;                                          <span class="comment">//0xd8</span></span><br><span class="line">&#125;LDR_DATA_TABLE_ENTRY64, * PLDR_DATA_TABLE_ENTRY64;</span><br></pre></td></tr></table></figure><p><strong>_LDR_MODULE 版本：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_LDR_MODULE</span> &#123;</span><br><span class="line">    LIST_ENTRY InLoadOrderModuleList;</span><br><span class="line">    LIST_ENTRY InMemoryOrderModuleList;</span><br><span class="line">    LIST_ENTRY InInitializationOrderModuleList;</span><br><span class="line">    PVOID BaseAddress;</span><br><span class="line">    PVOID EntryPoint;</span><br><span class="line">    ULONG SizeOfImage;</span><br><span class="line">    UNICODE_STRING FullDllName;</span><br><span class="line">    UNICODE_STRING BaseDllName;</span><br><span class="line">    ULONG Flags;</span><br><span class="line">    SHORT LoadCount;</span><br><span class="line">    SHORT TlsIndex;</span><br><span class="line">    LIST_ENTRY HashTableEntry;</span><br><span class="line">    ULONG TimeDateStamp;</span><br><span class="line">&#125; LDR_MODULE, * PLDR_MODULE;</span><br></pre></td></tr></table></figure><p><code>PPEB_LDR_DATA</code>结构是一个入口，类似于火车头，里面<code>_LIST_ENTRY-&gt;Flink</code>指向第一个_LDR_DATA_TABLE_ENTRY，然后第一个指向第二个以此类推，最后一个指向第一个，而<code>_LIST_ENTRY-&gt;Blink</code>指向的是上一个火车，第二个指向火车头，火车头指向最后一个。</p><img src="/post/db27253d/1678441641758-dfd9ac3a-205f-470e-b440-6f4ba6bcbc99.png" class=""><p>这是广为流传的一张图，大多数文章都会拿它做案例，但其实它有一点点错误（吐槽：这么多人都没发现)，Blink指向的并不是上一个Blink，而是指向上一个<code>LIST_ENTRY</code>的地址，下面进行详细分析。</p><h3 id="解析PEB："><a href="#解析PEB：" class="headerlink" title="解析PEB："></a>解析PEB：</h3><p>我们如何找到PEB的地址？这里有三种方法：</p><ol><li>查看OD等调试器的寄存器窗口，fs段寄存器的后面会接着TEB结构指针。直接在内存窗口跳过去即可</li><li>通过fs的值拆分成段选择子，通过GDT表查找段描述符，得到一个3环的调用门….#*#%$()#…..  很显然我不会，直接放弃。</li><li>第三种是最方便的，32位：fs:[0x18]存储着TEB结构指针，fs:[0x30]存储着PEB结构指针。64位：gs:[0x60]存储着PEB结构指针。</li></ol><p>为什么不能通过fs直接过去呢？因为fs存储的是段选择子，不是真正的地址所以需要通过偏移。<br>接下来尝试手动解析：这里用的是64位exe，工具x64dbg</p><img src="/post/db27253d/1678442221771-ed156fe0-67dd-442e-8fe4-312cd5b4005e.png" class=""><p>利用gs:[0x60]获取PEB地址，也可以直接用peb()快捷获取，得到地址：000000CA38C50000，ctrl+g跳转，此时就是PEB的结构指针。我们在0x18h(在64位下偏移是18h)处找到<code>PPEB_LDR_DATA</code>地址00007FF8E7B1C4C0</p><img src="/post/db27253d/1678677608598-6b58788b-2e47-4a18-89f2-ac2001f8dad2.png" class=""><p>跳转到<code>PPEB_LDR_DATA</code>处,0X20处偏移是我们要找的第一个<code>LDR_DATA_TABLE_ENTRY</code>的<code>InMemoryOrderModuleList</code>地址：0000021892B02820，此时</p><ul><li>Flink地址：0000021892B02650</li><li>Blink地址：00007FF8E7B1C4E0</li></ul><img src="/post/db27253d/1678690802015-b4a28afd-fb9f-4dd1-b901-c214e5311f3e.png" class=""><ul><li>EntryPoint：00007FF7A96916E0</li><li>FullDllName：（0x58-0x60）</li><li>BaseDllName：(0x68-0x70)</li></ul><p>根据Flink跳转至下一个<code>LDR_DATA_TABLE_ENTRY</code></p><img src="/post/db27253d/1678691622423-45b01e51-1b0f-4586-a5cf-37ac53366bf0.png" class=""><p>下一个_LDR_DATA_TABLE_ENTRY结构的<code>InMemoryOrderModuleList</code>处<br>此时Flink：0000021892B02D70指向下一个<code>InMemoryOrderModuleList</code>地址，Blink：0000021892B02820刚好指向了上一个<code>InMemoryOrderModuleList</code>地址</p><ul><li>FullDllName：c:\windows\system32\ntdll.dll</li><li>BaseDllName：ntdll.dll</li></ul><p>继续下一跳，Flink：0000021892B02D70，Blink：0000021892B02650刚好指向ntdll.dll的<code>InMemoryOrderModuleList</code>起始地址</p><img src="/post/db27253d/1678691953598-bd24213c-7a93-4482-bc71-d03695d60145.png" class=""><p>我们可以依次遍历下去，找到我们所需要的基址</p><h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><p>微软很贴心的提供了两个获取PEB的api</p><ul><li><a href="https://docs.microsoft.com/en-us/cpp/intrinsics/readgsbyte-readgsdword-readgsqword-readgsword?view=msvc-170&viewFallbackFrom=vs-2019">__readgsqword</a> 64位</li><li><a href="https://docs.microsoft.com/en-us/cpp/intrinsics/readfsbyte-readfsdword-readfsqword-readfsword?view=msvc-170&viewFallbackFrom=vs-2019">__readfsqword</a>  32位</li></ul><p>我们也可以不用Windows的api</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 64位</span></span><br><span class="line">.CODE</span><br><span class="line">  GetPeb64 PROC</span><br><span class="line">    mov rax,gs:[<span class="number">60</span>h]</span><br><span class="line">  ret</span><br><span class="line">  GetPeb64 ENDP</span><br><span class="line"> END</span><br><span class="line"></span><br><span class="line"><span class="comment">//32位</span></span><br><span class="line">.CODE</span><br><span class="line">    GetPeb32 PROC</span><br><span class="line">    mov rax, fs:[<span class="number">30</span>h];</span><br><span class="line">    ret;</span><br><span class="line">    GetPeb32 ENDP</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以直接找到ldr地址</span></span><br><span class="line">.CODE</span><br><span class="line">    GetPebLdr PROC</span><br><span class="line">    mov rax, gs:[<span class="number">60</span>h];</span><br><span class="line">    add rax, <span class="number">18</span>h;</span><br><span class="line">    mov rax, [rax];</span><br><span class="line">    ret;</span><br><span class="line">    GetPebLdr ENDP</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>asm.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> __ASMCODE_H</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">PVOID64 _cdecl <span class="title">GetPeb</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h4 id="定义结构体查找导出函数地址："><a href="#定义结构体查找导出函数地址：" class="headerlink" title="定义结构体查找导出函数地址："></a>定义结构体查找导出函数地址：</h4><p>注：结构体定义太长了没贴上来，对着上面抄就行了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winternl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;global.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PIMAGE_DOS_HEADER pDos = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_FILE_HEADER pFile = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_OPTIONAL_HEADER pOptional = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_EXPORT_DIRECTORY pExport = <span class="literal">NULL</span>;</span><br><span class="line">PMPEB peb = (PMPEB)__readgsqword(<span class="number">0x60</span>);</span><br><span class="line">PLDR_DATA_TABLE_ENTRY64 pLdr = <span class="literal">NULL</span>;</span><br><span class="line">PBYTE imageBase = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use PEB to find the base address of ntdll.dll</span></span><br><span class="line">pLdr = (PLDR_DATA_TABLE_ENTRY64)((PBYTE)peb-&gt;LoaderData-&gt;InMemoryOrderModuleList.Flink - <span class="number">0x10</span>);</span><br><span class="line"><span class="built_in">wprintf</span>(<span class="string">L&quot;[*]name:%s\n&quot;</span>, pLdr-&gt;BaseDllName.Buffer);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]DllBase:%p\n&quot;</span>, (PBYTE)pLdr-&gt;DllBase);</span><br><span class="line"><span class="keyword">while</span> ((_wcsicmp(pLdr-&gt;BaseDllName.Buffer, <span class="string">L&quot;ntdll.dll&quot;</span>)) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">pLdr = (PLDR_DATA_TABLE_ENTRY64)((PBYTE)pLdr-&gt;InMemoryOrderLinks.Flink - <span class="number">0x10</span>);</span><br><span class="line">imageBase = (PBYTE)pLdr-&gt;DllBase;</span><br><span class="line"><span class="built_in">wprintf</span>(<span class="string">L&quot;[*]name: %s\n&quot;</span>,pLdr-&gt;BaseDllName.Buffer);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]DllBase: %p\n&quot;</span>, imageBase);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]find ntdll.dll address.....\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// find the exported functions of ntdll.dll</span></span><br><span class="line">pDos = (PIMAGE_DOS_HEADER)imageBase;</span><br><span class="line"><span class="keyword">if</span> (*(PWORD)pDos != <span class="number">0x5A4D</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]pe parsing failed..&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">pOptional = (PIMAGE_OPTIONAL_HEADER)((PBYTE)pDos + pDos-&gt;e_lfanew + <span class="built_in">sizeof</span>(DWORD) + <span class="built_in">sizeof</span>(IMAGE_FILE_HEADER));</span><br><span class="line">pExport = (PIMAGE_EXPORT_DIRECTORY)((PBYTE)imageBase + pOptional-&gt;DataDirectory[<span class="number">0</span>].VirtualAddress);</span><br><span class="line"></span><br><span class="line">PDWORD pdwAddressOfFunctions = (PDWORD)((PBYTE)(imageBase + pExport-&gt;AddressOfFunctions));</span><br><span class="line">PDWORD pdwAddressOfNames = (PDWORD)((PBYTE)imageBase + pExport-&gt;AddressOfNames);</span><br><span class="line">PWORD pwAddressOfNameOrdinales = (PWORD)((PBYTE)imageBase + pExport-&gt;AddressOfNameOrdinals);</span><br><span class="line"><span class="keyword">for</span> (WORD cx = <span class="number">0</span>; cx &lt; pExport-&gt;NumberOfNames; cx++)</span><br><span class="line">&#123;</span><br><span class="line">PCHAR pczFunctionName = (PCHAR)((PBYTE)imageBase + pdwAddressOfNames[cx]);</span><br><span class="line">PVOID pFunctionAddress = (PBYTE)imageBase + pdwAddressOfFunctions[pwAddressOfNameOrdinales[cx]];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]Function Name:%s\tFunction Address:%p\n&quot;</span>, pczFunctionName, pFunctionAddress);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="直接利用偏移："><a href="#直接利用偏移：" class="headerlink" title="直接利用偏移："></a>直接利用偏移：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winternl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;getPeb.h&quot;</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// custom VirtualProtect function</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">BOOL</span><span class="params">(WINAPI* CustomVirtualProtect)</span><span class="params">(LPVOID lpAddress, SIZE_T dwSize, DWORD  flNewProtect, PDWORD lpflOldProtect)</span></span>;</span><br><span class="line">CustomVirtualProtect myVirtualProtect;</span><br><span class="line"></span><br><span class="line"><span class="function">PVOID <span class="title">GetFunctionAddress</span><span class="params">(PVOID pBaseAddress, PCHAR pFunctionName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PIMAGE_DOS_HEADER pDos = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_FILE_HEADER pFile = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_OPTIONAL_HEADER pOptional = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_EXPORT_DIRECTORY pExport = <span class="literal">NULL</span>;</span><br><span class="line">PVOID getFunctionAddress = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">pDos = (PIMAGE_DOS_HEADER)pBaseAddress;</span><br><span class="line"><span class="keyword">if</span> (*(PWORD)pDos != <span class="number">0x5A4D</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]pe parsing failed..&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">pOptional = (PIMAGE_OPTIONAL_HEADER)((PBYTE)pDos + pDos-&gt;e_lfanew + <span class="built_in">sizeof</span>(DWORD) + <span class="built_in">sizeof</span>(IMAGE_FILE_HEADER));</span><br><span class="line">pExport = (PIMAGE_EXPORT_DIRECTORY)((PBYTE)pBaseAddress + pOptional-&gt;DataDirectory[<span class="number">0</span>].VirtualAddress);</span><br><span class="line"></span><br><span class="line">PDWORD pdwAddressOfFunctions = (PDWORD)((PBYTE)pBaseAddress + pExport-&gt;AddressOfFunctions);</span><br><span class="line">PDWORD pdwAddressOfNames = (PDWORD)((PBYTE)pBaseAddress + pExport-&gt;AddressOfNames);</span><br><span class="line">PWORD pwAddressOfNameOrdinales = (PWORD)((PBYTE)pBaseAddress + pExport-&gt;AddressOfNameOrdinals);</span><br><span class="line"><span class="keyword">for</span> (WORD cx = <span class="number">0</span>; cx &lt; pExport-&gt;NumberOfNames; cx++)</span><br><span class="line">&#123;</span><br><span class="line">PCHAR pczFunctionName = (PCHAR)((PBYTE)pBaseAddress + pdwAddressOfNames[cx]);</span><br><span class="line">PVOID pFunctionAddress = (PBYTE)pBaseAddress + pdwAddressOfFunctions[pwAddressOfNameOrdinales[cx]];</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == _strnicmp(pczFunctionName, pFunctionName, <span class="built_in">strlen</span>(pczFunctionName)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]Function Name:%s\tFunction Address:%p\n&quot;</span>, pczFunctionName, pFunctionAddress);</span><br><span class="line">getFunctionAddress = pFunctionAddress;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> getFunctionAddress;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PVOID64 peb = <span class="built_in">GetPeb64</span>();</span><br><span class="line">PVOID64 PEB_LDR_DATA = *(PVOID64**)((PBYTE)peb + <span class="number">0x18</span>);</span><br><span class="line">PVOID64 PEB_LDR_TABLE_ENTRY = (PVOID64)((PBYTE)PEB_LDR_DATA + <span class="number">0x20</span>);</span><br><span class="line">UNICODE_STRING* fullName = <span class="literal">NULL</span>;</span><br><span class="line">LIST_ENTRY* pListEntry = <span class="literal">NULL</span>;</span><br><span class="line">HMODULE hKernel32 = <span class="literal">NULL</span>;</span><br><span class="line">PVOID apiID = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">pListEntry = (LIST_ENTRY*)PEB_LDR_TABLE_ENTRY;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">pListEntry = pListEntry-&gt;Flink;</span><br><span class="line">fullName = (UNICODE_STRING*)((PBYTE)pListEntry + <span class="number">0x48</span>);</span><br><span class="line">hKernel32 = (HMODULE)(*((PULONG64)((PBYTE)pListEntry + <span class="number">0x20</span>)));</span><br><span class="line"><span class="built_in">wprintf</span>(<span class="string">L&quot;[*]moduleNaame: %s\n&quot;</span>, fullName-&gt;Buffer);</span><br><span class="line"><span class="built_in">wprintf</span>(<span class="string">L&quot;[*]moduleAddress: %p\n&quot;</span>, hKernel32);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> ((_wcsicmp(fullName-&gt;Buffer, <span class="string">L&quot;kernel32.dll&quot;</span>)) != <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;find address....\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">apiID = <span class="built_in">GetFunctionAddress</span>((PVOID)hKernel32, (PCHAR)<span class="string">&quot;VirtualProtect&quot;</span>);</span><br><span class="line">myVirtualProtect = (CustomVirtualProtect)(DWORD)apiID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：取值时要注意是指针还是二重指针，数据宽度要注意</p><p>参考文章：<a href="https://bbs.kanxue.com/thread-266678.htm">https://bbs.kanxue.com/thread-266678.htm</a><br>                   <a href="http://www.youngroe.com/2015/08/01/Debug/peb-analysis/">http://www.youngroe.com/2015/08/01/Debug/peb-analysis/</a></p>]]></content>
      
      
      <categories>
          
          <category> 逆向免杀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向免杀 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
